ファイル仕様
============

スタンダードモード用入力ファイル
--------------------------------

スタンダードモード用入力ファイルは次のような格好をしています。

::

    W = 2
     L = 4
     model = "spin"
     method = "Lanczos"

     lattice = "triangular lattice"
    //mu = 1.0
    // t = -1.0
    // t' = -0.5
    // U = 8.0
    //V = 4.0
    //V'=2.0
    J = -1.0
    J'=-0.5
    // nelec = 8
    2Sz = 0

大まかなルールは次のとおりです。

-  各行にはひと組ずつキーワード(\ ``=``\ の前)と
   パラメーター(\ ``=``\ の後)が書かれており間は\ ``=``\ で区切られています。

-  各キーワードは順不同に記述できます。

-  空白行、または\ ``//``\ で始まる行(コメントアウト)は読み飛ばされます。

-  各キーワード、パラメーターの大文字\ :math:`\cdot`\ 小文字は区別されません。
   ダブルクオート、空白は無視されます。

-  必ず指定しなければいけないパラメーター、
   指定しない場合デフォルト値が使われるパラメーター、
   (他のパラメーターの組み合わせによっては)使われないパラメーターが存在します。
   使われないパラメーターが指定された場合にはプログラムは終了し、
   入力ファイルをチェックするようにというメッセージが表示されます。

次に各キーワードの説明をします。

計算の種類に関する必須パラメーター
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  ``model``

   **形式 :** 文字列(\ ``"Fermion Hubbard"``, ``"Spin"``,
   ``"Kondo Lattice"``, ``"Fermion HubbardGC"``, ``"SpinGC"``,
   ``"Kondo LatticeGC"``, ``"SpinGCCMA"``\ のいずれか)

   **説明 :** 計算対象の模型を指定します。上記の文字列はそれぞれ
   カノニカル集団のフェルミ粒子Hubbard模型

   .. math::

      \begin{aligned}
      H = - \mu \sum_{i \sigma} c^\dagger_{i \sigma} c_{i \sigma} 
      - \sum_{i \neq j \sigma} t_{i j} c^\dagger_{i \sigma} c_{j \sigma} 
      + \sum_{i} U n_{i \uparrow} n_{i \downarrow}
      + \sum_{i \neq j} V_{i j} n_{i} n_{j},
      \label{fml4_1_hubbard}\end{aligned}

    同じくカノニカル集団のスピン模型
   (:math:`\{\sigma_1, \sigma_2\}={x, y, z}`)

   .. math::

      \begin{aligned}
      H &= -h \sum_{i} S_{i z} - \Gamma \sum_{i} S_{i x} + D \sum_{i} S_{i z} S_{i z}
      \nonumber \\
      &+ \sum_{i j, \sigma_1}J_{i j \sigma_1} S_{i \sigma_1} S_{j \sigma_1}+ \sum_{i j, \sigma_1 \neq \sigma_2} J_{i j \sigma_1 \sigma_2} S_{i \sigma_1} S_{j \sigma_2} ,
      \label{fml4_1_spin}\end{aligned}


   カノニカル集団の近藤格子模型(Hubbard模型と同様に\ :math:`U`\ と\ :math:`J`\ を入れることも可能)

   .. math::

      \begin{aligned}
      H &= - \mu \sum_{i \sigma} c^\dagger_{i \sigma} c_{i \sigma} 
      - t \sum_{\langle i j \rangle \sigma} c^\dagger_{i \sigma} c_{j \sigma} 
      + \frac{J}{2} \sum_{i} \left\{
      S_{i}^{+} c_{i \downarrow}^\dagger c_{i \uparrow}
      + S_{i}^{-} c_{i \uparrow}^\dagger c_{i \downarrow}
      + S_{i z} (n_{i \uparrow} - n_{i \downarrow})\right\}
      \nonumber \\
      & +  \sum_{i} U n_{i \uparrow} n_{i \downarrow}
      + \sum_{i \neq j} V_{i j} n_{i} n_{j}
      ,
      \label{fml4_1_kondo}\end{aligned}


   グランドカノニカル集団のフェルミ粒子Hubbard模型[式([fml4\_1\_hubbard])]、
   グランドカノニカル集団のスピン模型[式([fml4\_1\_spin])]、
   グランドカノニカル集団の近藤格子模型[式([fml4\_1\_kondo])]に対応します。

   ``"SpinGCCMA"``\ では\ ``"SpinGC"``\ と同じ計算を
   より速いアルゴリズム [1]_を用いて行います。
   ただし、扱うことのできるモデルやMPI並列数に強い制約があります。
   以下の\ ``"Lattice"``\ の項もご参照ください。

-  ``method``

   **形式 :** 文字列(\ ``"Lanczos"``, ``"TPQ"``, ``"Full Diag"``,
   ``"CG"``, ``"Time-Evolution"``\ のいずれか)

   **説明 :** 実行する計算の種類を指定します。
   上記の文字列はそれぞれランチョス法による少数固有状態の計算,
   熱力学的純粋状態を用いた有限温度計算, 直接法による全固有状態計算,
   LOBCG法:raw-latex:`\cite{doi:10.1137/S1064827500366124,transactionJSCES2006}`による少数固有状態の計算,
   実時間発展計算 に対応します。

   後述のスペクトル計算において使用される手法もこのパラメーターで指定されます
   ``"CG"``\ とした場合には
   付属している\ :math:`K\omega`\ ライブラリ:raw-latex:`\cite{komega}`が呼び出され、
   シードスイッチ付きシフト双共役勾配法
   :raw-latex:`\cite{Frommer2003,doi:10.1143/JPSJ.77.114713}`が適用されます。

-  ``lattice``

   **形式 :** 文字列(\ ``"Chain Lattice"``, ``"Square Lattice"``,
   ``"Triangular Lattice"``, ``"Honeycomb Lattice"``, ``"Ladder"``,
   ``"Kagome"``\ のいずれか)

   **説明 :** 格子の形状を指定します。 上記文字列はそれぞれ1次元鎖(Fig.
   [fig\_chap04\_1\_lattice](a))、 2次元正方格子(Fig.
   [fig\_chap04\_1\_lattice](b))、 2次元三角格子(Fig.
   [fig\_chap04\_1\_lattice](c))、 2次元異方的蜂の巣格子(Fig.
   [fig\_chap04\_1\_honeycomb])、 梯子格子(Fig. [fig\_ladder])、
   カゴメ格子(Fig. [fig\_kagome])に対応します。

   ``method="SpinGCCMA"``\ では、 このうち\ ``"Chain Lattice"``,
   ``"Honeycomb Lattice"``, ``"Ladder"``,
   ``"Kagome"``\ に対応しています。

   各格子についてのサイズ(\ :math:`L`,\ :math:`W`)とMPI並列数(\ :math:`N_{\rm proc}`)の制限は次のとおりです
   (次節の``L``, ``W``\ もご参照ください)。

   -  ``"Chain Lattice"``

      :math:`L = 8n`\ (ただし:math:`n`\ は\ :math:`n\geq1`\ の整数),
      :math:`N_{\rm proc} \leq 2(L=8)`,
      :math:`N_{\rm proc} \leq 2^{L/2-2}(L>8)`.

   -  ``"Honeycomb Lattice"``

      :math:`W=3, L \geq 2`, :math:`N_{\rm proc} \leq 2(L=2)`,
      :math:`N_{\rm proc} \leq 64(L>2)`.

   -  ``"Ladder"``

      :math:`W=2, L = 2n`\ (ただし:math:`n`\ は\ :math:`n\geq4`\ の整数),
      :math:`N_{\rm proc} \leq 2^{L-4}`.

   -  ``"Kagome"``

      :math:`W=3, L \geq 2`, :math:`N_{\rm proc} \leq 1(L=2)`,
      :math:`N_{\rm proc} \leq 512(L>2)`.

   .. figure:: ../figs/chap04_1_lattice.pdf
      :alt: (a)1次元鎖、(b)2次元正方格子、(c)2次元三角格子の模式図.
      ホッピング積分、オフサイトクーロン積分、スピン結合は、
      再近接サイト間(マゼンタの実線)ではそれぞれ\ :math:`t,V,J`\ となり、
      次近接サイト間(緑の破線)ではそれぞれ\ :math:`t',V',J'`\ となります。
      :width: 10.00000cm

      (a)1次元鎖、(b)2次元正方格子、(c)2次元三角格子の模式図.
      ホッピング積分、オフサイトクーロン積分、スピン結合は、
      再近接サイト間(マゼンタの実線)ではそれぞれ\ :math:`t,V,J`\ となり、
      次近接サイト間(緑の破線)ではそれぞれ\ :math:`t',V',J'`\ となります。

   .. figure:: ../figs/chap04_1_honeycomb.pdf
      :alt: 2次元異方的蜂の巣格子の模式図.
      ホッピング積分、オフサイトクーロン積分、スピン結合は、
      ボンドの方向によって異なります。
      また、次近接のホッピング積分、オフサイトクーロン積分、スピン結合
      には対応していません。
      :width: 15.00000cm

      2次元異方的蜂の巣格子の模式図.
      ホッピング積分、オフサイトクーロン積分、スピン結合は、
      ボンドの方向によって異なります。
      また、次近接のホッピング積分、オフサイトクーロン積分、スピン結合
      には対応していません。 

   .. figure:: ../figs/kagome.pdf
      :alt: カゴメ格子の模式図.
      :width: 15.00000cm

      カゴメ格子の模式図. 

   .. figure:: ../figs/ladder.pdf
      :alt: 梯子格子の模式図.
      :width: 10.00000cm

      梯子格子の模式図.

格子に関するパラメーター
~~~~~~~~~~~~~~~~~~~~~~~~

1次元鎖[Fig. [fig\_chap04\_1\_lattice](a)]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``L``

   **形式 :** 自然数

   **説明 :** 鎖の長さを指定します.

梯子格子(Fig. [fig\_ladder])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``L``

   **形式 :** 自然数

   **説明 :** 梯子の長さを指定します.

-  ``W``

   **形式 :** 自然数

   **説明 :** 梯子の本数を指定します.

.. figure:: ../figs/chap04_1_unitlattice.pdf
   :alt: 三角格子において、\ :math:`{\vec a}_0 = (6, 2), {\vec a}_1 = (2, 4)`\ とした場合のセル形状。
   :math:`{\vec a}_0`\ (マゼンタ)および:math:`{\vec a}_1`\ (グリーン)
   で囲まれた部分(サイト数は20)が計算するセルとなる。
   :width: 15.00000cm

   三角格子において、\ :math:`{\vec a}_0 = (6, 2), {\vec a}_1 = (2, 4)`\ とした場合のセル形状。
   :math:`{\vec a}_0`\ (マゼンタ)および:math:`{\vec a}_1`\ (グリーン)
   で囲まれた部分(サイト数は20)が計算するセルとなる。 

矩形格子[Fig. [fig\_chap04\_1\_lattice](b)]、 三角格子[Fig. [fig\_chap04\_1\_lattice](c)]、 蜂の巣格子(Fig. [fig\_chap04\_1\_honeycomb])、 カゴメ格子(Fig. [fig\_kagome])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

これらの格子では、標準の単位胞(図中の黒の破線を参照)を用いて格子形状を指定する方法と、
それらとは別の方向に格子ベクトルを取る方法が選択できます。
ただし、\ ``model=SpinGCCMA``\ の時には前者のみが使えます。
また、両方を指定した場合には\ :math:`\HPhi`\ を終了します。

-  ``W``, ``L``

   **形式 :** 自然数

   **説明 :** 標準の単位胞の並び方を指定します。

-  ``a0W``, ``a0L``, ``a1W``, ``a1L``

   **形式 :** 自然数

   **説明 :**
   格子を指定する2本のベクトル(\ :math:`{\vec a}_0, {\vec a}_1`)
   を指定します (Fig. [fig\_chap04\_1\_unitlattice])。
   これらのベクトルは標準の並進ベクトルを基底とした座標(Fractional
   coordinate) で指定されます。

スタンダードモードで出力される\ ``lattice.gp``\ というファイルを使うと、
自分の意図した通りの格子のとり方になっているかどうかを確かめる事が出来ます。
このファイルは、次のようにして\ ``gnuplot``\ に読み込ませることが出来ます。

::

    $ gnuplot lattice.gp

保存量に関するパラメーター
~~~~~~~~~~~~~~~~~~~~~~~~~~

-  ``nelec``

   **形式 :** 整数

   **説明 :** 伝導電子数を指定します。 ``model = "Fermion HubbardGC"``,
   ``"Spin"``, ``"SpinGC"`` のときには指定しないでください。

-  ``2Sz``

   **形式 :** 整数

   **説明 :** 全スピンのz 成分の2倍を指定します。
   ``model = "Fermion HubbardGC"``, ``SpinGC``
   のときには指定しないでください。

ハミルトニアンの各項の係数
~~~~~~~~~~~~~~~~~~~~~~~~~~

デフォルト値は特に記載されていないものについては0に設定してあります。
型が複素数のパラメータは「実部, 虚部」(間に“,”)の形式で指定し、
実数の場合には「実部」で指定が可能です。

局所項
^^^^^^

-  ``mu``

   **形式 :** 実数

   **説明 :**
   Hubbardおよび近藤格子模型での化学ポテンシャルを指定します。

-  ``U``

   **形式 :** 実数

   **説明 :**
   Hubbardおよび近藤格子模型でのオンサイトクーロン積分を指定します。

-  ``Jx``, ``Jy``, ``Jz``, ``Jxy``, ``Jyx``, ``Jxz``, ``Jzx``, ``Jyz``,
   ``Jzy``

   **形式 :** 実数

   **説明 :**
   近藤格子模型での、局在電子と遍歴電子のスピン結合を指定します。
   また対角項について,
   ``Jx, Jy, Jz``\ を指定する代わりに、パラメータ\ ``J``\ を指定すると
   ``Jx = Jy = Jz = J``\ が代入されます。 ``J``\ を指定した上で\ ``Jx``,
   ``Jy``, ``Jz``\ を指定した場合は\ :math:`\HPhi`\ を終了します。

-  ``h``

   **形式 :** 実数

   **説明 :** 縦磁場を指定します。

-  ``Gamma``, ``D``

   **形式 :** 実数

   **説明 :**
   スピン模型での縦磁場、横磁場、異方性パラメータを指定します。
   ただし異方性パラメータについては、\ ``model=SpinGCCMA``\ では使用できません。

下記の非局所項は、梯子格子の場合とそれ以外(１次元鎖、矩形格子、三角格子、蜂の巣格子、カゴメ格子)
の場合で指定の仕方が異なります。
また、各格子で指定可能なパラメーターをTable
[table\_interactions]に表します。

+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| 相互作用                        | 1次元鎖         | 矩形格子        | 三角格子        | 蜂の巣格子      | カゴメ格子      | 梯子格子        |    |    |
+=================================+=================+=================+=================+=================+=================+=================+====+====+
| ``J``, ``t``, ``V``\ (省略形)   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | -               |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| ``J'``, ``t'``, ``V'``          | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | -               |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| ``J0``, ``t0``, ``V0``          | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| ``J1``, ``t1``, ``V1``          | -               | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| ``J2``, ``t2``, ``V2``          | -               | -               | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   | :math:`\circ`   |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| ``J1'``, ``t1'``, ``V1'``       | -               | -               | -               | -               | -               | :math:`\circ`   |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+
| ``J2'`` ,\ ``t2'``, ``V2'``     | -               | -               | -               | -               | -               | :math:`\circ`   |    |    |
+---------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+----+----+

Table: 各格子で定義可能な相互作用一覧。ただし、スピン結合については行列として与えることが可能。

非局所項[梯子格子 (Fig. [fig\_ladder])]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``t0``, ``t1``, ``t1'``, ``t2``, ``t2'``

   **形式 :** 複素数

   **説明 :** 梯子格子でのホッピング(Fig.
   [fig\_ladder]参照)を指定します。

-  ``V0``, ``V1``, ``V1'``, ``V2``, ``V2'``

   **形式 :** 実数

   **説明 :** 梯子格子でのオフサイトクーロン積分 (Fig.
   [fig\_ladder]参照)を指定します。

-  ``J0x``, ``J0y``, ``J0z``, ``J0xy``, ``J0yx``, ``J0xz``, ``J0zx``,
   ``J0yz``, ``J0zy``

-  ``J1x``, ``J1y``, ``J1z``, ``J1xy``, ``J1yx``, ``J1xz``, ``J1zx``,
   ``J1yz``, ``J1zy``

-  ``J1'x``, ``J1'y``, ``J1'z``, ``J1'xy``, ``J1'yx``, ``J1'xz``,
   ``J1'zx``, ``J1'yz``, ``J1'zy``

-  ``J2x``, ``J2y``, ``J2z``, ``J2xy``, ``J2yx``, ``J2xz``, ``J2zx``,
   ``J2yz``, ``J2zy``

-  ``J2'x``, ``J2'y``, ``J2'z``, ``J2'xy``, ``J2'yx``, ``J2'xz``,
   ``J2'zx``, ``J2'yz``, ``J2'zy``

   **形式 :** 実数

   **説明 :** 梯子格子でのスピン相互作用 (Fig.
   [fig\_ladder]参照)を指定します。
   また対角項について、例えば\ ``J0x, J0y, J0z``\ を指定する代わりに
   パラメータ\ ``J0``\ を指定すると
   ``J0x = J0y = J0z = J0``\ が代入されます。
   ``J0``\ を指定した上で\ ``J0x, J0y, J0z``\ 等も指定した場合は\ :math:`\HPhi`\ を終了します。
   ``J1``, ``J1'``, ``J2``, ``J2'``\ についても同様です。

非局所項 [梯子格子以外(Figs. [fig\_chap04\_1\_lattice], [fig\_chap04\_1\_honeycomb], [fig\_kagome])]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``t0``, ``t1``, ``t2``

   **形式 :** 複素数

   **説明 :**
   Hubbardおよび近藤格子模型での、最近接サイト間の各方向のホッピングを指定します。
   また、ホッピングのボンド方向依存性がない場合は\ ``t0``, ``t1``,
   ``t2``\ を
   別々に指定する代わりにパラメータ\ ``t``\ を指定すると、\ ``t0 = t1 = t2 = t``\ が代入されます。
   ``t``\ と\ ``t0``\ 等の両方が指定された場合には\ :math:`\HPhi`\ を終了します。

-  ``V0``, ``V1``, ``V2``

   **形式 :** 実数

   **説明 :**
   Hubbardおよび近藤格子模型での、最近接サイト間のCoulomb積分を指定します。
   また、サイト間Coulomb積分のボンド方向依存性がない場合は\ ``V0``,
   ``V1``, ``V2``\ を
   別々に指定する代わりにパラメータ\ ``V``\ を指定すると、\ ``V0 = V1 = V2 = V``\ が代入されます。
   ``V``\ と\ ``V0``\ 等の両方が指定された場合には\ :math:`\HPhi`\ を終了します。

-  ``J0x``, ``J0y``, ``J0z``, ``J0xy``, ``J0yx``, ``J0xz``, ``J0zx``,
   ``J0yz``, ``J0zy``

-  ``J1x``, ``J1y``, ``J1z``, ``J1xy``, ``J1yx``, ``J1xz``, ``J1zx``,
   ``J1yz``, ``J1zy``

-  ``J2x``, ``J2y``, ``J2z``, ``J2xy``, ``J2yx``, ``J2xz``, ``J2zx``,
   ``J2yz``, ``J2zy``

   **形式 :** 実数

   **説明 :**
   スピン模型での、最近接サイト間のスピン相互作用を指定します。
   また対角項について、例えば\ ``J0x, J0y, J0z``\ を指定する代わりに
   パラメータ\ ``J0``\ を指定すると
   ``J0x = J0y = J0z = J0``\ が代入されます。
   ``J0``\ を指定した上で\ ``J0x, J0y, J0z``\ 等も指定した場合は\ :math:`\HPhi`\ を終了します。
   ``J1``, ``J2``\ についても同様です。

   スピン間相互作用のボンド方向依存性がない場合には、 ``Jx``, ``Jy``,
   ``Jz``, ``Jxy``, ``Jyx``, ``Jxz``, ``Jzx``, ``Jyz``, ``Jzy``
   を指定すると、\ ``J0x = J1x = J2x = Jx``\ のようにすべてのボンド方向のスピン間相互作用に
   同じ値を代入することが出来ます。
   ``Jx``\ :math:`\sim`\ ``Jzy``\ 系列のどれかと\ ``J0x``\ :math:`\sim`\ ``J2zy``\ 系列のどれかを両方指定した
   場合には\ :math:`\HPhi`\ を終了します。
   以下に最近接間スピン相互作用の指定方法の例を挙げます。

   -  ボンド方向依存性、スピン方向依存性、相互作用の非対角成分(\ :math:`J_{x y}`\ 等)がない場合

      ``J``\ を指定

   -  ボンド方向依存性、相互作用の非対角成分がなく、スピン方向依存性がある場合

      ``Jx, Jy, Jz``\ のうち\ ``0``\ でないものを指定

   -  ボンド方向依存性がなく、スピン方向依存性、相互作用の非対角成分がある場合

      ``Jx, Jy, Jz, Jxy, Jyz, Jxz, Jyx, Jzy, Jzx``\ のうち\ ``0``\ でないものを指定

   -  スピン方向依存性、相互作用の非対角成分がなく、ボンド方向依存性がある場合

      ``J0, J1, J2``\ のうち\ ``0``\ でないものを指定

   -  スピン方向依存性がなく、ボンド方向依存性、相互作用の非対角成分がある場合

      ``J0x, J0y, J0z, J1x, J1y, J1z, J2x, J2y, J2z``\ のうち\ ``0``\ でないものを指定

   -  ボンド方向依存性、スピン方向依存性、相互作用の非対角成分がある場合

      ``J0x``\ :math:`\sim`\ ``J2zy``\ のすべてのうち\ ``0``\ でないものを指定

-  ``t'``

   **形式 :** 複素数

   **説明 :**
   Hubbardおよび近藤格子模型での、次近接サイト間の各方向のホッピングを指定します。

-  ``V'``

   **形式 :** 実数

   **説明 :**
   Hubbardおよび近藤格子模型での、次近接サイト間のCoulomb積分を指定します。

-  ``J'x``, ``J'y``, ``J'z``, ``J'xy``, ``J'yx``, ``J'xz``, ``J'zx``,
   ``J'yz``, ``J'zy``

   **形式 :** 実数

   **説明 :**
   スピン模型での、次近接サイト間のスピン相互作用を指定します。
   ただし、蜂の巣格子またはカゴメ格子で\ ``model=SpinGCCMA``\ の場合には
   まだ対応していません。
   また対角項について、\ ``J'x, J'y, J'z``\ を指定する代わりに
   パラメータ\ ``J'``\ を指定すると
   ``J'x = J'y = J'z = J'``\ が代入されます。
   ``J'``\ を指定した上で\ ``J'x, J'y, J'z``\ も指定した場合は\ :math:`\HPhi`\ を終了します。

-  ``phase0``, ``phase1``

   **形式 :** 実数 (デフォルトでは``0.0``)

   **説明 :**
   計算するセルの境界をまたいだホッピング項に付く因子の位相を指定することが出来ます
   (単位: 度)。
   :math:`\vec{a}_0`\ 方向、\ :math:`\vec{a}_1`\ 方向それぞれ別の位相因子を用いることが出来ます。
   １次元系では\ ``phase0``\ のみ使用できます。
   例えば、\ :math:`i`\ サイトから\ :math:`j`\ サイトへのホッピングで、
   正の方向に境界をまたいだ場合には次のようになります。

   .. math::

      \begin{aligned}
          \exp(i \times {\rm phase0}\times\pi/180) \times t {\hat c}_{j \sigma}^\dagger {\hat c}_{i \sigma}
          + \exp(-i \times {\rm phase0}\times\pi/180) \times t^* {\hat c}_{i \sigma}^\dagger {\hat c}_{j \sigma}
        \end{aligned}

計算条件のパラメーター
~~~~~~~~~~~~~~~~~~~~~~

-  ``2S``

   **形式 :** 正の整数(デフォルト値は\ ``1``)

   **説明 :**
   スピン模型での局在スピンの大きさ\ :math:`S`\ の2倍を指定します。 (例/
   :math:`1/2`\ スピンならば\ ``1``)

-  ``Restart``

   **形式 :** 文字列(\ ``"None"``, ``"Restart_out"``, ``"Restart_in"``,
   ``"Restart"``\ のいずれか。デフォルトは\ ``"None"``)

   **説明 :** 再計算に関する設定を行う。
   ``"None"``\ では再計算に関連するファイル出力をしない。
   ``"Restart_out"``\ では一から計算を始めて、
   反復が終了した時点で再計算用のデータをファイル出力する。
   ``"Restart_in"``\ では再計算用のデータをファイルから受け取り途中から計算を始める。
   ``"Restart"``\ では再計算用のデータをファイルから受け取り途中から計算を始め、
   反復が終了した時点で再計算用のデータをファイル出力する。

-  ``Lanczos_max``

   **形式 :** 整数(デフォルト値は\ ``2000``)

   **説明 :** ランチョスステップの上限、LOBCGステップの上限、
   TPQステップ数、時間発展ステップ数、BiCGステップの上限を指定します。

-  ``initial_iv``

   **形式 :** 整数(デフォルト値は\ ``-1``)

   **説明 :** 初期条件のベクトルを与えます。

   -  ランチョス法

      -  カノニカル集団かつ ``initial_iv`` :math:`\geq 0`\ の場合

         ノンゼロの成分が指定されます。

      -   ``initial_iv`` :math:`< 0`\ の場合

         乱数のシードが指定され、全ての成分に対して係数がランダムに与えられます。なお、グランドカノニカルの場合は初期状態として多くの状態を持つよう、こちらの様式が適用されます。

   -  TPQ法

      乱数のシードが指定され、全ての成分に対して係数がランダムに与えられます。

   初期ベクトル設定の詳細については、[Ch:algorithm]を参照ください。

-  ``exct``

   **形式 :** 整数(デフォルト値は\ ``1``)

   **説明 :** ``method="Lancoz"``\ ではエネルギーの低いものから数えて、
   何番目の固有状態を計算するかを指定します。
   ``method="CG"``\ の時には求める固有状態の本数を指定します。

-  ``LanczosEps``

   **形式 :** 整数(デフォルト値は\ ``14``)

   **説明 :** ランチョスの収束判定条件を指定します。
   ひとつ前のステップの固有値との相対誤差が,
   :math:`10^{-{\tt LanczosEps}}`\ 以下になったら収束したと判断します。
   ``method="CG"``\ の時には残差ベクトルの2-ノルムが
   :math:`10^{-{\tt LanczosEps}/2}`\ 以下になったら収束したと判断します。

-  ``LanczosTarget``

   **形式 :** 整数(デフォルト値は\ ``2``)

   **説明 :** エネルギーの低いものから数えて、
   何番目の固有値でランチョスの収束判定を行うかを指定します。

-  ``LargeValue``

   **形式 :** 実数(デフォルト値は下記参照)

   **説明 :**
   (TPQ法のみで使用):math:`l-\hat{H}/N_{s}`\ の\ :math:`l`\ 。
   ハミルトニアンの各項の係数の絶対値の総和をサイト数で割ったものがデフォルト値になります。

-  ``NumAve``

   **形式 :** 整数(デフォルト値は\ ``5``)

   **説明 :** (TPQ法のみで使用)独立なrunを何回行うかを指定します。

-  ``ExpecInterval``

   **形式 :** 整数(デフォルト値は\ ``20``)

   **説明 :**
   (TPQ法のみで使用)相関関数の計算を何回のTPQステップおきに行うかの指定。
   頻度を上げると計算コストが増大するので注意してください。

-  ``OutputMode``

   **形式 :** ``"none"``, ``"correlation"``,
   ``"full"``\ のいずれか(デフォルトは\ ``correlation``)

   **説明 :** 計算を行う相関関数を指定します。
   ``"none"``\ の場合は相関関数を計算しません。
   ``"correlation"``\ を指定した場合には、付属のユーティリティ
   ``fourier``\ でサポートするものに対応した相関関数を計算します。
   詳しくは\ ``doc/fourier/``\ 内のマニュアルを参照してください。
   ``"full"``\ を指定した場合には、
   1体部分はすべての\ :math:`i, j, \sigma, \sigma'`\ について
   :math:`\langle c_{i \sigma}^{\dagger}c_{j \sigma'} \rangle`\ を、
   2体部分はすべての\ :math:`i_1, i_2, i_3, i_4, \sigma_1, \sigma_2, \sigma_3, \sigma_4`\ について
   :math:`\langle c_{i_1 \sigma_1}^{\dagger}c_{i_2 \sigma_2} c_{i_3 \sigma_3}^{\dagger}c_{i_4 \sigma_4} \rangle`
   を計算します。
   スピン系の演算子はBogoliubov表現により生成消滅演算子で表されています。
   詳しくは[sec\_bogoliubov\_rep]をご覧ください。

-  ``InitialVecType``

   **形式 :** 文字 (``"C"``, ``"R"``\ のいずれか。
   デフォルトは\ ``"C"``)

   **説明 :** 固有ベクトルの初期値の型を指定する。
   ``C``\ では複素数型、\ ``R``\ では実数型とする。

-  ``EigenVecIO``

   **形式 :** 文字列(\ ``"None"``, ``"Out"``, ``"In"``\ のいずれか。
   デフォルトは\ ``"None"``)

   **説明 :** 固有ベクトルの入出力を指定する。
   ``"None"``\ では固有ベクトルの入出力を行わない。
   ``"Out"``\ では求めた固有ベクトルをファイルに出力する。
   ``"In"``\ では固有ベクトルをファイルから取り出し、
   その後の計算(動的グリーン関数など)を行う。

動的グリーン関数の計算に関するパラメーター
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  ``CalcSpec``

   **形式 :** 文字列(\ ``"None"``, ``"Normal"``, ``"NoIteration"``,
   ``"Restart_out"``, ``"Restart_in"``,
   ``"Restart"``\ 。デフォルトは\ ``"None"``)

   **説明 :** 動的グリーン関数の計算に関する設定を行う。
   ``"None"``\ では動的グリーン関数を計算しない。
   ``"Normal"``\ では一から動的グリーン関数の計算を始める。
   ``"NoIteration"``\ では、前回の反復回数と同じところまで反復させる。
   このとき、ハミルトニアン-ベクトル積演算は行われないため、
   計算コストは非常に軽いが、十分な精度が出せない場合がある。
   ``"Restart_out"``\ では一から計算を始めて、
   反復が終了した時点で再計算用のデータをファイル出力する。
   ``"Restart_in"``\ では再計算用のデータをファイルから受け取り途中から計算を始める。
   ``"Restart"``\ では再計算用のデータをファイルから受け取り途中から計算を始め、
   反復が終了した時点で再計算用のデータをファイル出力する。
   スペクトル計算において使用される手法はパラメーター\ ``method``\ で指定されます。
   (``method="CG"``\ とした場合には
   付属している\ :math:`K\omega`\ ライブラリ:raw-latex:`\cite{komega}`が呼び出され、
   シードスイッチ付きシフト双共役勾配法
   :raw-latex:`\cite{Frommer2003,doi:10.1143/JPSJ.77.114713}`が使われます。

-  ``SpectrumType``

   **形式 :** 文字列(\ ``"SzSz"``, ``"S+S-"``, ``"Density"``, ``"up"``,
   ``"down"``\ のいずれか。デフォルトは\ ``"SzSz"``)

   **説明 :** 計算する動的グリーン関数の種類を指定する。
   ``"SzSz"``\ では\ :math:`\langle {\hat S}_{z q} {\hat S}_{z q}\rangle`\ 、
   ``"S+S-"``\ では\ :math:`\langle {\hat S}^{+}_{q} {\hat S}^{-}_{q}\rangle`\ 、
   ``"Density"``\ では\ :math:`\langle {\hat n}_{q} {\hat n}_{q}\rangle`\ 、
   ``"up"``\ では\ :math:`\langle {\hat c}^{\dagger}_{q \uparrow} {\hat c}_{q \uparrow}\rangle`\ 、
   ``"down"``\ では\ :math:`\langle {\hat c}^{\dagger}_{q \downarrow} {\hat c}_{q \downarrow}\rangle`
   となる。

-  ``SpectrumQW``, ``SpectrumQL``

   **形式 :** 実数(デフォルトはともに\ ``0.0``)

   **説明 :** 計算する動的グリーン関数の波数を Fractional
   coordinateで指定する。 逆格子ベクトルはFigs.
   [fig\_chap04\_1\_lattice], [fig\_chap04\_1\_honeycomb],
   [fig\_ladder], [fig\_kagome]
   に表されている格子ベクトルと対応するものとなる。

-  ``OmegaMin``

   **形式 :**
   実数(デフォルトは\ ``-LargeValue``\ :math:`\times`\ サイト数)

   **説明 :** 計算する動的グリーン関数の振動数の実部の下限。

-  ``OmegaMax``

   **形式 :**
   実数(デフォルトは\ ``LargeValue``\ :math:`\times`\ サイト数)

   **説明 :** 計算する動的グリーン関数の振動数の実部の上限。

-  ``OmegaIm``

   **形式 :** 実数(デフォルトは\ ``0.01*LargeValue``)

   **説明 :** 計算する動的グリーン関数の振動数の虚部。

-  ``NOmega``

   **形式 :** 正の整数(デフォルトは\ ``200``)

   **説明 :** 計算する動的グリーン関数の振動数のグリッド数。

実時間発展計算に関するパラメーター
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  ``dt``

   **形式 :** 正の実数(デフォルトは\ ``0.1``)

   **説明 :** 時間ステップ幅。

-  ``PumpType``

   **形式 :** 文字列(\ ``"Quench"``, ``"Pulse Laser"``, ``"AC Laser"``,
   ``"DC Laser"``\ のいずれか。デフォルトは\ ``"Quench"``)

   **説明 :** 時間依存ハミルトニアンの種類を指定する。
   ``"Quench"``\ では2体演算子
   :math:`U_{\rm quench} \sum_i n_{i \uparrow} n_{i \downarrow}`\ が加えられる。
   ``"Pulse Laser"``, ``"AC Laser"``, ``"DC Laser"``\ では、
   ホッピング項に
   :math:`-\sum_{i j \sigma} t_{i j} \exp[-i{\bf A}(t) \cdot ({\bf R}_i-{\bf R}_j)/(2\pi)] c_{i \sigma} c_{j \sigma}`
   のように位相因子が付く。
   ここで\ :math:`{\bf A}(t)`\ はベクトルポテンシャルであり、
   ``"Pulse Laser"``\ では
   :math:`{\bf A}(t) = {\bf A}_0 \exp[-(t-t_0)^2/(2 t_{\rm dump}^2)] \cos[\omega (t-t_0)]`\ 、
   ``"AC Laser"``\ では
   :math:`{\bf A}(t) = {\bf A}_0 \sin[\omega (t-t_0)]`\ 、
   ``"DC Laser"``\ では :math:`{\bf A}(t) = {\bf A}_0 t`\ となる。

   また、各時刻でのベクトルポテンシャルと電場を図示するためのファイル
   ``potential.dat``\ が出力される。

-  ``Uquench``

   **形式 :** 実数(デフォルトは\ ``0.0``)

   **説明 :** :math:`U_{\rm quench}`

-  ``freq``

   **形式 :** 実数(デフォルトは\ ``0.1``)

   **説明 :** :math:`\omega`

-  ``tshift``

   **形式 :** 実数(デフォルトは\ ``0.0``)

   **説明 :** :math:`t_0`

-  ``tdump``

   **形式 :** 実数(デフォルトは\ ``0.1``)

   **説明 :** :math:`t_{\rm dump}`

-  ``VecPotW``, ``VecPotL``

   **形式 :** 実数(デフォルトはともに\ ``0.0``)

   **説明 :**
   時刻\ :math:`t=t_0`\ でのベクトルポテンシャル\ :math:`{\bf A}_0`\ を
   逆格子のFractional coordinateで指定する。 逆格子ベクトルはFigs.
   [fig\_chap04\_1\_lattice], [fig\_chap04\_1\_honeycomb],
   [fig\_ladder], [fig\_kagome]
   に表されている格子ベクトルと対応するものとなる。

エキスパートモード用入力ファイル
--------------------------------

:math:`\HPhi`\ のエキスパートモードで使用する入力ファイル(\*def)に関して説明します。
入力ファイルの種別は以下の4つで分類されます。

(1) List:
    |  
    | キーワード指定なし: 使用するinput
      fileの名前のリストを書きます。なお、ファイル名は任意に指定することができます。

(2) Basic parameters:
    |  
    | **CalcMod**: 計算モードを指定するパラメーターを設定します。  
    | **ModPara**:
      計算時に必要な基本的なパラメーター(サイトの数、電子数、Lanczosステップを何回やるかなど)を設定します。
       
    | **LocSpin**: 局在スピンの位置を設定します(近藤模型でのみ利用)。

(3) Hamiltonian:
    | :math:`\HPhi`\ のHamiltonianを電子系の表式により指定します。  
    | 具体的には以下のファイルで指定されます。  
    | **Trans**:
      :math:`c_{i\sigma_1}^{\dag}c_{j\sigma_2}`\ で表される一体項を指定します。
       
    | **InterAll**:
      :math:`c_ {i \sigma_1}^{\dag}c_{j\sigma_2}c_{k \sigma_3}^{\dag}c_{l \sigma_4}`\ で表される一般二体相互作用を指定します。
    |  
    | なお、使用頻度の高い相互作用に関しては下記のキーワードで指定することも可能です。
       
    | **CoulombIntra**:
      :math:`n_ {i \uparrow}n_{i \downarrow}`\ で表される相互作用を指定します(\ :math:`n_{i \sigma}=c_{i\sigma}^{\dag}c_{i\sigma}`)。
       
    | **CoulombInter**:
      :math:`n_ {i}n_{j}`\ で表される相互作用を指定します(\ :math:`n_i=n_{i\uparrow}+n_{i\downarrow}`)。
       
    | **Hund**:
      :math:`n_{i\uparrow}n_{j\uparrow}+n_{i\downarrow}n_{j\downarrow}`\ で表される相互作用を指定します。
       
    | **PairHop**:
      :math:`c_ {i \uparrow}^{\dag}c_{j\uparrow}c_{i \downarrow}^{\dag}c_{j  \downarrow}`\ で表される相互作用を指定します。
       
    | **Exchange**:
      :math:`S_i^+ S_j^-`\ で表される相互作用を指定します。  
    | **Ising**: :math:`S_i^z S_j^z`\ で表される相互作用を指定します。  
    | **PairLift**:
      :math:`c_ {i \uparrow}^{\dag}c_{i\downarrow}c_{j \uparrow}^{\dag}c_{j \downarrow}`\ で表される相互作用を指定します。

(4) Output:
    |  
    | **OneBodyG** :出力する一体Green関数を指定します。
      :math:`\langle c^{\dagger}_{i\sigma_1}c_{j\sigma_2}\rangle`\ が出力されます。

    **TwoBodyG** :出力する二体Green関数を指定します。
    :math:`\langle c^{\dagger}_{i\sigma_1}c_{j\sigma_2}c^{\dagger}_{k \sigma_3}c_{l\sigma_4}\rangle`
    が出力されます。

 

入力ファイル指定用ファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~

| 計算で使用する入力ファイル一式を指定します。ファイル形式に関しては、以下のようなフォーマットをしています。

::

    CalcMod  calcmod.def
    ModPara  modpara.def
    LocSpin  zlocspn.def
    Trans    ztransfer.def
    InterAll zinterall.def
    OneBodyG zcisajs.def
    TwoBodyG    zcisajscktaltdc.def

| 

ファイル形式
^^^^^^^^^^^^

[string01] [string02]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (固定)

   **説明 :** キーワードを指定します。

-  :math:`[`\ string02\ :math:`]`

   **形式 :** string型

   **説明 :** キーワードにひも付けられるファイル名を指定します(任意)。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  キーワードを記載後、半角空白を開けた後にファイル名を書きます。ファイル名は自由に設定できます。

-  ファイル読込用キーワードはTable[Table:Defs]により指定します。

-  必ず指定しなければいけないパラメーターはCalcMod, ModPara,
   LocSpinです。

-  各キーワードは順不同に記述できます。

-  指定したキーワード、ファイルが存在しない場合はエラー終了します。

-  :math:`\#`\ で始まる行は読み飛ばされます。

+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| Keywords           | 指定ファイルの概要                                                                                                                     |
+====================+========================================================================================================================================+
| CalcMod            | 計算モードに関する指定をします。                                                                                                       |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| ModPara            | 計算で用いるパラメータの指定をします。                                                                                                 |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| LocSpin            | 各サイトに対して遍歴電子もしくは局在スピンの指定をします。                                                                             |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| Trans              | 一般的一体相互作用に関する設定をします。                                                                                               |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| InterAll           | 一般的二体相互作用に関する設定をします。                                                                                               |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| CoulombIntra       | 内部クーロン相互作用に関する設定をします。                                                                                             |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| CoulombInter       | サイト間クーロン相互作用に関する設定をします。                                                                                         |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| Hund               | フント結合に関する設定をします。                                                                                                       |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| PairHop            | ペアホッピングに関する設定をします。                                                                                                   |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| Exchange           | 交換相互作用に関する設定をします。                                                                                                     |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| Ising              | イジング相互作用に関する設定をします。                                                                                                 |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| PairLift           | ペアリフト相互作用に関する設定をします。                                                                                               |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| OneBodyG           | 出力する一体グリーン関数\ :math:`\langle c_{i\sigma}^{\dagger}c_{j\sigma}\rangle` に関する設定をします。                               |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| TwoBodyG           | 出力するニ体グリーン関数 :math:`\langle c_{i\sigma}^{\dagger}c_{j\sigma}c_{k\tau}^{\dagger}c_{l\tau}\rangle`\ に関する設定をします。   |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| SingleExcitation   | 一体励起状態の生成演算子に関する指定をします。                                                                                         |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| PairExcitation     | ニ体励起状態の生成演算子に関する指定をします。                                                                                         |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| SpectrumVec        | スペクトル関数を計算するためのリスタート用の入力ベクトルを指定します。                                                                 |
+--------------------+----------------------------------------------------------------------------------------------------------------------------------------+

CalcModファイル
~~~~~~~~~~~~~~~

| 計算手法、計算モデル、出力モードを指定します。以下のようなフォーマットをしています。

::

    CalcType   0
    CalcModel   2
    CalcEigenVec 0

| 

ファイル形式
^^^^^^^^^^^^

[string01] [int01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (固定)

   **説明 :** キーワードを指定します。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   | **説明 :** キーワードにひも付けられるパラメータを指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  キーワードを記載後、半角空白を開けた後に整数値を書きます。

-  各キーワードは順不同に記述できます。

-  指定したキーワード、ファイルが存在しない場合はエラー終了します。

-  キーワードCalcType, CalcModelは省略できません。
   省略した場合はエラー終了します。

-  :math:`\#`\ で始まる行は読み飛ばされます。

 

キーワード
^^^^^^^^^^

次に各キーワードで指定されるパラメータに関して説明します。

-  ``CalcType``

   **形式 :** int型

   | **説明 :** 計算手法の指定を行います。
   | 0: Lanczos法
   | 1: TPQを利用した有限温度解析
   | 2: 全対角化
   | 3: LOBCG法
   | を選択することができます。

-  ``CalcModel``

   **形式 :** int型

   | **説明 :** 計算モデルの指定を行います。
   | 0: fermion
     Hubbard模型(カノニカル：粒子数・\ :math:`S_z`\ 保存、粒子数・\ :math:`S_z`\ 非保存)
   | 1: スピン模型(カノニカル：\ :math:`S_z`\ 保存)
   | 2: 近藤模型(カノニカル：粒子数・\ :math:`S_z`\ 保存)
   | 3: fermion
     Hubbard模型(グランドカノニカル：粒子数・\ :math:`S_z`\ 非保存)
   | 4: スピン模型(グランドカノニカル：\ :math:`S_z`\ 非保存)
   | 5: 近藤模型(グランドカノニカル：粒子数・\ :math:`S_z`\ 非保存)
   | を選択することが出来ます。 ferimon
     Hubbard模型で粒子数保存・\ :math:`S_z`\ 非保存を選択する場合は、粒子数のみを指定することで計算が可能となります。

-  ``CalcEigenVec``

   **形式 :** int型 (デフォルト値 0)

   | **説明 :** 固有ベクトルを計算する際の手法の指定を行います。
   | 0: Lanczos法+CG法
     (Lanczos法での収束が十分でない場合にCG法での固有ベクトル計算が行われます)
   | 1: Lanczos法
   | で選択することが出来ます。

-  ``InitialVecType``

   **形式 :** int型 (デフォルト値 0)

   | **説明 :** 固有ベクトルの初期値の型の指定を行います。
   | 0: 複素数
   | 1: 実数
   | から選択することが出来ます。

-  ``OutputEigenVec``

   **形式 :** int型 (デフォルト値 0)

   **説明 :** 固有ベクトルの出力の指定を行います。
   0: 出力なし
   1: 出力あり
   から選択することが出来ます。

-  ``InputEigenVec``

   **形式 :** int型 (デフォルト値 0)

   **説明 :** 固有ベクトルの入力の指定を行います。
   0: 入力なし
   1: 入力あり
   から選択することが出来ます。

-  ``ReStart``

   **形式 :** int型 (デフォルト値 0)

   **説明 :** 再計算用のモードを指定します。
   0: 再計算なし
   1: リスタートベクトル入力なし、出力あり
   2: リスタートベクトル入力あり、出力あり
   3: リスタートベクトル入力あり、出力なし
   から選択することが出来ます。

-  ``CalcSpec``

   **形式 :** int型 (デフォルト値 0)

   **説明 :** 動的グリーン関数の計算モードを指定します。
   0: 動的グリーン関数の計算なし
   1: 入力ベクトル・励起状態生成ファイルを読み込み計算
   2: 三重対角行列の成分を読み込み再計算
   3: 三重対角行列の成分と再計算用ベクトルを出力
   4: 三重対角行列の成分と再計算用ベクトルを読み込み再計算
   5: 三重対角行列の成分と再計算用ベクトルを読み込み再計算・再出力
   から選択することが出来ます。

-  ``OutputHam``

   **形式 :** int型 (デフォルト値 0)

   **説明 :** (FullDiag) ハミルトニアンの出力モードを指定します。
   0: 出力なし
   1: 出力あり
   から選択することが出来ます。

-  ``InputHam``

   **形式 :** int型 (デフォルト値 0)

   **説明 :** (FullDiag) ハミルトニアンの入力モードを指定します。
   0: 入力なし
   1: 入力あり
   から選択することが出来ます。

-  ``Scalapack``

   **形式 :** int型 (デフォルト値 0)

   | **説明 :** (FullDiag)
     全対角化計算でのScaLAPACKライブラリの使用有無を指定します。
   | 0: ScaLAPACKを使用しない。
   | 1: ScaLAPACKを使用する。
   | で選択することが出来ます。

-  ``NGPU``

   **形式 :** int型 (デフォルト値 2)

   **説明 :** (FullDiag)
   全対角化計算でのMAGMAライブラリを使用する場合のGPU数を指定します。
   なお、\ :math:`\HPhi`\ ではマルチノードでのGPU計算には対応していません。

ModParaファイル
~~~~~~~~~~~~~~~

| 計算で使用するパラメータを指定します。以下のようなフォーマットをしています。

::

    --------------------
    Model_Parameters   0
    --------------------
    HPhi_Cal_Parameters
    --------------------
    CDataFileHead  zvo
    CParaFileHead  zqp
    --------------------
    Nsite          16   
    Ncond          16    
    2Sz            0    
    Lanczos_max    1000 
    initial_iv     12   
    exct           1    
    LanczosEps     14   
    LanczosTarget  2    
    LargeValue     12   
    NumAve         5    
    ExpecInterval  20   

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1 - 5行: ヘッダ(何が書かれても問題ありません)。

-  6行: [string01] [string02]

-  7 - 8行: ヘッダ(何が書かれても問題ありません)

-  9行以降: [string01] [int01]

各項目の対応関係は以下の通りです。

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (固定)

   **説明 :** キーワードの指定を行います。

-  :math:`[`\ string02\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** アウトプットファイルのヘッダを指定します。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** キーワードでひも付けられるパラメータを指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  9行目以降ではキーワードを記載後、半角空白を開けた後に整数値を書きます。

-  行数固定で読み込みを行う為、パラメータの省略はできません。

 

キーワード
^^^^^^^^^^

以下、共通パラメータと各手法毎に必要なパラメータを記載します。

 

共通パラメータ
^^^^^^^^^^^^^^

-  ``CDataFileHead``

   **形式 :** string型 (空白不可)

   **説明 :**
   アウトプットファイルのヘッダ。例えば、一体のGreen関数の出力ファイル名が\ **xxx\_Lanczos\_cisajs.dat**\ として出力されます(xxxに\ ``CDataFileHead``\ で指定した文字が記載)。

-  ``Nsite``

   **形式 :** int型 (自然数)

   **説明 :** サイト数を指定する整数。

-  ``Ncond``

   **形式 :** int型 (自然数)

   **説明 :**
   伝導電子数を指定する整数。グランドカノニカルの場合には使用されません。

-  ``2Sz``

   **形式 :** int型 (自然数)

   **説明 :**
   :math:`2S_z`\ を指定する整数。グランドカノニカルの場合には使用されません。電子系、近藤格子模型で\ :math:`S_z`\ 保存の計算を行う場合には\ ``Ncond``\ を指定する必要があります。

-  ``initial_iv``

   **形式 :** int型 (整数)

   **説明 :** 初期条件のベクトルを与えます。

   -  Lanczos法, CG法

      -  カノニカル集団かつ ``initial_iv`` :math:`\geq 0`\ の場合

         ノンゼロの成分が指定されます。

      -   ``initial_iv`` :math:`< 0`\ の場合

         乱数のシードが指定され、全ての成分に対して係数がランダムに与えられます。なお、グランドカノニカルの場合は初期状態として多くの状態を持つよう、こちらの様式が適用されます。

   -  TPQ法

      乱数のシードが指定され、全ての成分に対して係数がランダムに与えられます。

   初期ベクトル設定の詳細については、[Ch:algorithm]を参照ください。

-  ``CalcHS``

   **形式 :** int型 (自然数)

   **説明 :**
   ``CalcHS=1``\ で量子数を指定したときのヒルベルト空間生成が高速化されます(詳細は http://issp-center-dep.github.io/HPhi/develop/tips.pdfを参照)。
   デフォルトの値は1で、高速化アルゴリズムが使用されます。

 

Lanczos法で使用するパラメータ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``exct``

   **形式 :** int型 (自然数)

   **説明 :** Lanczos法で求める固有ベクトルの番号を指定する整数。
   例えば、1なら基底状態のベクトル、2なら第一励起状態のベクトルを求めます。

-  ``Lanczos_max``

   **形式 :** int型 (自然数)

   **説明 :** Lanczosステップを行う回数の最大値を与えます。
   指定した精度内で収束した場合には、これより短い回数で終了します。
   この回数以内で収束しない場合はエラー終了します。
   再計算を行う場合には、\ ``Lanczos_max``\ の最大数を過去のステップ数よりも大きくする必要があります。

-  ``LanczosEps``

   **形式 :** int型 (自然数)

   **説明 :** Lanczos法の収束判定条件を指定する整数。
   一つ前のステップの固有値との相対誤差が,
   :math:`10^{- \verb|LanczosEps|}`\ 以下になった場合に収束したと判定します。

-  ``LanczosTarget``

   **形式 :** int型 (自然数)

   **説明 :**
   何番目の固有値でランチョスの収束判定を行うかを指定する整数。1なら基底状態。2なら第一励起状態を示します。

 

CG法で使用するパラメータ
^^^^^^^^^^^^^^^^^^^^^^^^

-  ``exct``

   **形式 :** int型 (自然数)

   **説明 :** 求める固有ベクトルの本数を指定します。

-  ``Lanczos_max``

   **形式 :** int型 (自然数)

   **説明 :** CG法を行う際のステップ数の最大値を与えます。
   指定した精度内で収束した場合には、これより短い回数で終了します。
   この回数以内で収束しない場合はエラー終了します。
   再計算を行う場合には、\ ``Lanczos_max``\ の最大数を過去のステップ数よりも大きくする必要があります。

-  ``LanczosEps``

   **形式 :** int型 (自然数)

   **説明 :** 残差ベクトルの2-ノルムが
   :math:`10^{- \verb|LanczosEps|/2}`\ 以下になった場合に収束したと判定します。

 

TPQ法で使用するパラメータ
^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``Lanczos_max``

   **形式 :** int型 (自然数)

   **説明 :** TPQ法の総ステップ数を与えます。
   再計算を行う場合には、\ ``Lanczos_max``\ の最大数を過去のステップ数よりも大きくする必要があります。

-  ``LargeValue``

   **形式 :** double型 (実数)

   **説明 :**
   TPQで使用する\ :math:`l-\hat{H}/N_{s}`\ の\ :math:`l`\ を指定する整数。

-  ``NumAve``

   **形式 :** int型 (自然数)

   **説明 :** 独立なrunを何回行うかを指定する整数。

-  ``ExpecInterval``

   **形式 :** int型 (自然数)

   **説明 :**
   相関関数の計算を何回のTPQステップおきに行うかの指定する整数。
   頻度を上げると計算コストが増大するので注意してください。

 

動的グリーン関数の計算で使用するパラメータ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``OmegaOrg``

   **形式 :** complex型 (複素数)

   **説明 :**
   動的グリーン関数を計算する際の振動数\ :math:`\omega`\ の中心点を指定します。
   スペース区切りで実部、虚部の順に指定し、虚部がない場合は実数として扱います。

-  ``OmegaIm``

   **形式 :** double型 (実数)

   **説明 :**
   動的グリーン関数を計算する際の振動数\ :math:`\omega`\ の中心点の虚部を指定します。
   中心点\ ``OmegaOrg``\ が指定されている場合は\ ``OmegaOrg``\ に虚部\ ``OmegaIm``\ を加えます。

-  ``OmegaMax``

   **形式 :** complex型 (複素数)

   **説明 :**
   動的グリーン関数を計算する際の振動数\ :math:`\omega`\ の終点を指定します。
   終点は\ ``OmegaOrg``\ :math:`+`\ ``OmegaMax``\ で与えられます。
   スペース区切りで実部、虚部の順に指定し、虚部がない場合は実数として扱います。

-  ``OmegaMin``

   **形式 :** complex型 (複素数)

   **説明 :**
   動的グリーン関数を計算する際の振動数\ :math:`\omega`\ の始点を指定します。
   終点は\ ``OmegaOrg``\ :math:`+`\ ``OmegaMin``\ で与えられます。
   スペース区切りで実部、虚部の順に指定し、虚部がない場合は実数として扱います。

-  ``NOmega``

   **形式 :** int型 (自然数)

   **説明 :**
   動的グリーン関数を計算する際の振動数の刻み幅\ :math:`\Delta \omega = (`
   ``OmegaMax``-
   ``OmegaMin``\ :math:`)/N_{\omega}`\ を与えるための整数。振動数は\ :math:`z_n=`\ ``OmegaOrg``\ :math:`+`\ ``OmegaMin``\ :math:`+ \Delta \omega \times n`\ で与えられます。

 

実時間発展法で使用するパラメータ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``Lanczos_max``

   **形式 :** int型 (自然数)

   **説明 :** 実時間発展法の総ステップ数を与えます。
   再計算を行う場合には、\ ``Lanczos_max``\ の最大数を過去のステップ数よりも大きくする必要があります。

-  ``ExpandCoef``

   **形式 :** int型 (自然数)

   **説明 :** 微小時間\ :math:`\Delta t`\ に対して実時間発展を行う際の

   .. math:: \exp\left(-i \hat{\cal H} \Delta t \right) = \sum_{n=0}^{N}\frac{1}{n!}\left(-i \hat{\cal H} \Delta t \right)^n

    に対する展開次数\ :math:`N`\ を与えます。

-  ``ExpecInterval``

   **形式 :** int型 (自然数)

   **説明 :** 相関関数の計算を行う際のステップ間隔を指定する整数。
   頻度を上げると計算コストが増大するので注意してください。

-  ``OutputInterval``

   **形式 :** int型 (自然数)

   **説明 :** 時間発展中の波動関数を出力するステップ間隔を指定する整数。
   (``CalcMod``\ ファイルで\ ``OutputEigenVec=1``\ にすると有効になります)

LocSpin指定ファイル
~~~~~~~~~~~~~~~~~~~

| 局在スピンを指定します。以下のようなフォーマットをしています。

::

    ================================ 
    NlocalSpin     6  
    ================================ 
    ========i_0LocSpn_1IteElc ====== 
    ================================ 
        0      1
        1      0
        2      1
        3      0
        4      1
        5      0
        6      1
        7      0
        8      1
        9      0
       10      1
       11      0

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** 局在スピンの総数を示すキーワード(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** 局在スピンの総数を指定する整数。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** 局在スピンか遍歴電子かを指定する整数。
   |  0: 遍歴電子
     :math:`n>0`: :math:`2S=n`\ の局在スピン
      を選択することが出来ます。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  :math:`[`\ int01\ :math:`]`\ と\ :math:`[`\ int03\ :math:`]`\ で指定される局在電子数の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`\ の総数が全サイト数と異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`\ が全サイト数以上もしくは負の値をとる場合はエラー終了します。

Trans指定ファイル
~~~~~~~~~~~~~~~~~

| ここではハミルトニアン

  .. math::

     \begin{aligned}
     H +=-\sum_{ij\sigma_1\sigma2} t_{ij\sigma_1\sigma2}c_{i\sigma_1}^{\dag}c_{j\sigma_2}\end{aligned}


  に対するTransfer積分\ :math:`t_{ij\sigma_1\sigma2}`\ を指定します。以下にファイル名を記載します。

::

    ======================== 
    NTransfer      24  
    ======================== 
    ========i_j_s_tijs====== 
    ======================== 
        0     0     2     0   1.000000  0.000000
        2     0     0     0   1.000000  0.000000
        0     1     2     1   1.000000  0.000000
        2     1     0     1   1.000000  0.000000
        2     0     4     0   1.000000  0.000000
        4     0     2     0   1.000000  0.000000
        2     1     4     1   1.000000  0.000000
        4     1     2     1   1.000000  0.000000
        4     0     6     0   1.000000  0.000000
        6     0     4     0   1.000000  0.000000
        4     1     6     1   1.000000  0.000000
        6     1     4     1   1.000000  0.000000
        6     0     8     0   1.000000  0.000000
        8     0     6     0   1.000000  0.000000
    …

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02]  [int03]  [int04]  [int05]  [double01]  [double02]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** Transfer総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** Transferの総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int04\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。
   | 0: アップスピン
   | 1: ダウンスピン
   | を選択することが出来ます。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`t_{ij\sigma_1\sigma_2}`\ の実部を指定します。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`t_{ij\sigma_1\sigma_2}`\ の虚部を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  Hamiltonianがエルミートという制限から\ :math:`t_{ij\sigma_1\sigma_2}=t_{ji\sigma_2\sigma_1}^{\dagger}`\ の関係を満たす必要があります。上記の関係が成立しない場合にはエラー終了します。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているTrasferの総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int05\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

InterAll指定ファイル
~~~~~~~~~~~~~~~~~~~~

ここでは一般二体相互作用をハミルトニアンに付け加えます。付け加える項は以下で与えられます。

.. math::

   H+=\sum_{i,j,k,l}\sum_{\sigma_1,\sigma_2, \sigma_3, \sigma_4}
   I_{ijkl\sigma_1\sigma_2\sigma_3\sigma_4}c_{i\sigma_1}^{\dagger}c_{j\sigma_2}c_{k\sigma_3}^{\dagger}c_{l\sigma_4}


なお、スピンに関して計算する場合には、\ :math:`i=j, k=l`\ となるよう設定してください。
以下にファイル例を記載します。

::

    ====================== 
    NInterAll      36  
    ====================== 
    ========zInterAll===== 
    ====================== 
    0    0    0    1    1    1    1    0   0.50  0.0
    0    1    0    0    1    0    1    1   0.50  0.0
    0    0    0    0    1    0    1    0   0.25  0.0
    0    0    0    0    1    1    1    1  -0.25  0.0
    0    1    0    1    1    0    1    0  -0.25  0.0
    0    1    0    1    1    1    1    1   0.25  0.0
    2    0    2    1    3    1    3    0   0.50  0.0
    2    1    2    0    3    0    3    1   0.50  0.0
    2    0    2    0    3    0    3    0   0.25  0.0
    2    0    2    0    3    1    3    1  -0.25  0.0
    2    1    2    1    3    0    3    0  -0.25  0.0
    2    1    2    1    3    1    3    1   0.25  0.0
    4    0    4    1    5    1    5    0   0.50  0.0
    4    1    4    0    5    0    5    1   0.50  0.0
    4    0    4    0    5    0    5    0   0.25  0.0
    4    0    4    0    5    1    5    1  -0.25  0.0
    4    1    4    1    5    0    5    0  -0.25  0.0
    4    1    4    1    5    1    5    1   0.25  0.0
    …

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降:
   [int02] [int03] [int04] [int05] [int06] [int07] [int08] [int09] [double01] [double02]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** 二体相互作用の総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** 二体相互作用の総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int04\ :math:`]`,
   :math:`[`\ int06\ :math:`]`, :math:`[`\ int08\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`,
   :math:`[`\ int07\ :math:`]`, :math:`[`\ int09\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。
   | 0: アップスピン
   | 1: ダウンスピン
   | を選択することが出来ます。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :**
   :math:`I_{ijkl\sigma_1\sigma_2\sigma_3\sigma_4}`\ の実部を指定します。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :**
   :math:`I_{ijkl\sigma_1\sigma_2\sigma_3\sigma_4}`\ の虚部を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  Hamiltonianがエルミートという制限から\ :math:`I_{ijkl\sigma_1\sigma_2\sigma_3\sigma_4}=I_{lkji\sigma_4\sigma_3\sigma_2\sigma_1}^{\dag}`\ の関係を満たす必要があります。上記の関係が成立しない場合にはエラー終了します。
   また、エルミート共役の形式は\ :math:`I_{ijkl\sigma_1\sigma_2\sigma_3\sigma_4}c_{i\sigma_1}^{\dagger}c_{j\sigma_2}c_{k\sigma_3}^{\dagger}c_{l\sigma_4}`\ に対して、\ :math:`I_{lkji\sigma_4\sigma_3\sigma_2\sigma_1}`
   :math:`c_{l\sigma_4}^{\dagger}c_{k\sigma_3}c_{j\sigma_2}^{\dagger}c_{i\sigma_1}`\ を満たすように入力してください。

-  スピンに関して計算する場合、\ :math:`i=j, k=l`\ を満たさないペアが存在するとエラー終了します。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているInterAllの総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int09\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

CoulombIntra指定ファイル
~~~~~~~~~~~~~~~~~~~~~~~~

オンサイトクーロン相互作用をハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。付け加える項は以下で与えられます。

.. math:: H+=\sum_{i}U_i n_ {i \uparrow}n_{i \downarrow}

 以下にファイル例を記載します。

::

    ====================== 
    NCoulombIntra 6  
    ====================== 
    ========i_0LocSpn_1IteElc ====== 
    ====================== 
       0  4.000000
       1  4.000000
       2  4.000000
       3  4.000000
       4  4.000000
       5  4.000000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   オンサイトクーロン相互作用の総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** オンサイトクーロン相互作用の総数を指定します。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`U_i`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているオンサイトクーロン相互作用の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

CoulombInter指定ファイル
~~~~~~~~~~~~~~~~~~~~~~~~

オフサイトクーロン相互作用をハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。付け加える項は以下で与えられます。

.. math:: H+=\sum_{i,j}V_{ij} n_ {i}n_{j}

 以下にファイル例を記載します。

::

    ====================== 
    NCoulombInter 6  
    ====================== 
    ========CoulombInter ====== 
    ====================== 
       0     1 -0.125000
       1     2 -0.125000
       2     3 -0.125000
       3     4 -0.125000
       4     5 -0.125000
       5     0 -0.125000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   オフサイトクーロン相互作用の総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** オフサイトクーロン相互作用の総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`V_{ij}`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているオフサイトクーロン相互作用の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int03\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

Hund指定ファイル
~~~~~~~~~~~~~~~~

Hundカップリングをハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。付け加える項は以下で与えられます。

.. math:: H+=-\sum_{i,j}J_{ij}^{\rm Hund} (n_{i\uparrow}n_{j\uparrow}+n_{i\downarrow}n_{j\downarrow})

 以下にファイル例を記載します。

::

    ====================== 
    NHund 6  
    ====================== 
    ========Hund ====== 
    ====================== 
       0     1 -0.250000
       1     2 -0.250000
       2     3 -0.250000
       3     4 -0.250000
       4     5 -0.250000
       5     0 -0.250000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** Hundカップリングの総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** Hundカップリングの総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`J_{ij}^{\rm Hund}`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているHundカップリングの総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int03\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

PairHop指定ファイル
~~~~~~~~~~~~~~~~~~~

PairHopカップリングをハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。付け加える項は以下で与えられます。

.. math:: H+=\sum_{i,j}J_{ij}^{\rm Pair} (c_ {i \uparrow}^{\dag}c_{j\uparrow}c_{i \downarrow}^{\dag}c_{j  \downarrow}+h.c.)

 以下にファイル例を記載します。

::

    ====================== 
    NPairhop 6
    ====================== 
    ========Pairhop ====== 
    ====================== 
       0     1  0.50000
       1     2  0.50000
       2     3  0.50000
       3     4  0.50000
       4     5  0.50000
       5     0  0.50000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   PairHopカップリングの総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** PairHopカップリングの総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`J_{ij}^{\rm Pair}`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  :math:`[`\ int01\ :math:`]`\ と定義されているPairHopカップリングの総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int03\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

Exchange指定ファイル
~~~~~~~~~~~~~~~~~~~~

Exchangeカップリングをハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。 電子系の場合には

.. math:: H+=\sum_{i,j}J_{ij}^{\rm Ex} (c_ {i \uparrow}^{\dag}c_{j\uparrow}c_{j \downarrow}^{\dag}c_{i  \downarrow}+c_ {i \downarrow}^{\dag}c_{j\downarrow}c_{j \uparrow}^{\dag}c_{i  \uparrow})

 が付け加えられ、スピン系の場合には

.. math:: H+=\sum_{i,j}J_{ij}^{\rm Ex} (S_i^+S_j^-+S_i^-S_j^+)

 が付け加えられます。 **スピン系の\ :math:`(S_i^+S_j^-+S_i^-S_j^+)`\ を
電子系の演算子で書き直すと、
:math:`-(c_ {i \uparrow}^{\dag}c_{j\uparrow}c_{j \downarrow}^{\dag}c_{i  \downarrow}+c_ {i \downarrow}^{\dag}c_{j\downarrow}c_{j \uparrow}^{\dag}c_{i  \uparrow})`
となることに注意して下さい。** 以下にファイル例を記載します。

::

    ====================== 
    NExchange 6  
    ====================== 
    ========Exchange ====== 
    ====================== 
       0     1  0.50000
       1     2  0.50000
       2     3  0.50000
       3     4  0.50000
       4     5  0.50000
       5     0  0.50000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   Exchangeカップリングの総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** Exchangeカップリングの総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`J_{ij}^{\rm Ex}`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているExchangeカップリングの総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int03\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

Ising指定ファイル
~~~~~~~~~~~~~~~~~

Ising相互作用をハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。 電子系の場合には

.. math:: H+=\sum_{i,j}J_{ij}^{z} (n_{i\uparrow}-n_{i\downarrow})(n_{j\uparrow}-n_{j\downarrow} )

 が付け加えられ、スピン系の場合には

.. math:: H+=\sum_{i,j}J_{ij}^{z} S_ {i}^{z}S_{j}^z

 が付け加えられます。 以下にファイル例を記載します。

::

    ====================== 
    NIsing 6  
    ====================== 
    ========Ising ====== 
    ====================== 
       0     1  0.50000
       1     2  0.50000
       2     3  0.50000
       3     4  0.50000
       4     5  0.50000
       5     0  0.50000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** Ising相互作用の総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** Ising相互作用の総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`J_{ij}^{\rm z}`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているIsing相互作用の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int03\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

PairLift指定ファイル
~~~~~~~~~~~~~~~~~~~~

PairLiftカップリングをハミルトニアンに付け加えます
(:math:`S=1/2`\ の系でのみ使用可能)。 付け加える項は以下で与えられます。

.. math:: H+=\sum_{i,j}J_{ij}^{\rm PairLift} (c_ {i \uparrow}^{\dag}c_{i\downarrow}c_{j \uparrow}^{\dag}c_{j \downarrow}+c_ {i \downarrow}^{\dag}c_{i\uparrow}c_{j \downarrow}^{\dag}c_{j \uparrow})

 以下にファイル例を記載します。

::

    ====================== 
    NPairLift 6  
    ====================== 
    ========NPairLift ====== 
    ====================== 
       0     1  0.50000
       1     2  0.50000
       2     3  0.50000
       3     4  0.50000
       4     5  0.50000
       5     0  0.50000

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02] [int03] [double01]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   PairLiftカップリングの総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** PairLiftカップリングの総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** :math:`J_{ij}^{\rm PairLift}`\ を指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  スピン系のみで使用可能です。電子系、近藤系で指定した場合は計算に使用されません。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているPairLiftカップリングの総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int03\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

OneBodyG指定ファイル
~~~~~~~~~~~~~~~~~~~~

一体グリーン関数\ :math:`\langle c_{i\sigma_1}^{\dagger}c_{j\sigma_2}\rangle`\ を計算します。以下にファイル例を記載します。

::

    ===============================
    NCisAjs         24
    ===============================
    ======== Green functions ======
    ===============================
        0     0     0     0
        0     1     0     1
        1     0     1     0
        1     1     1     1
        2     0     2     0
        2     1     2     1
        3     0     3     0
        3     1     3     1
        4     0     4     0
        4     1     4     1
        5     0     5     0
        5     1     5     1
        6     0     6     0
        6     1     6     1
        7     0     7     0
        7     1     7     1
        8     0     8     0
        8     1     8     1
        9     0     9     0
        9     1     9     1
       10     0    10     0
       10     1    10     1
       11     0    11     0
       11     1    11     1

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02]  [int03]  [int04]  [int05]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** 一体グリーン関数成分総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** 一体グリーン関数成分の総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int04\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。電子系・近藤格子系の場合は
   | 0: アップスピン、
   | 1: ダウンスピン、
   | スピン系の場合には、
   | :math:`0, 1, \cdots, 2S+1`
     (:math:`-S-0.5, -S+0.5, \cdots, S+0.5`\ に対応\ :math:`)`
   | を選択することが出来ます。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されている一体グリーン関数成分の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int05\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

TwoBodyG指定ファイル
~~~~~~~~~~~~~~~~~~~~

二体グリーン関数\ :math:`\langle c_{i\sigma_1}^{\dagger}c_{j\sigma_2}c_{k\sigma_3}^{\dagger}c_{l\sigma_4}\rangle`\ を計算します。
なお、スピンに関して計算する場合には、\ :math:`i=j, k=l`\ となるよう設定してください。
以下にファイル例を記載します。

::

    =============================================
    NCisAjsCktAltDC        576
    =============================================
    ======== Green functions for Sq AND Nq ======
    =============================================
        0     0     0     0     0     0     0     0
        0     0     0     0     0     1     0     1
        0     0     0     0     1     0     1     0
        0     0     0     0     1     1     1     1
        0     0     0     0     2     0     2     0
        0     0     0     0     2     1     2     1
        0     0     0     0     3     0     3     0
        0     0     0     0     3     1     3     1
        0     0     0     0     4     0     4     0
        0     0     0     0     4     1     4     1
        0     0     0     0     5     0     5     0
        0     0     0     0     5     1     5     1
        0     0     0     0     6     0     6     0
        0     0     0     0     6     1     6     1
        0     0     0     0     7     0     7     0
        0     0     0     0     7     1     7     1
        0     0     0     0     8     0     8     0
        0     0     0     0     8     1     8     1
        0     0     0     0     9     0     9     0
        0     0     0     0     9     1     9     1
        0     0     0     0    10     0    10     0
        0     0     0     0    10     1    10     1
        0     0     0     0    11     0    11     0
        0     0     0     0    11     1    11     1
        0     1     0     1     0     0     0     0
        …

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降:
   [int02]  [int03]  [int04]  [int05]  [int06]  [int07]  [int08]  [int09]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** 二体グリーン関数成分総数のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** 二体グリーン関数成分の総数を指定します。

-  :math:`[`\ int02\ :math:`]`,
   :math:`[`\ int04\ :math:`]`,\ :math:`[`\ int06\ :math:`]`,
   :math:`[`\ int08\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`,
   :math:`[`\ int05\ :math:`]`,\ :math:`[`\ int07\ :math:`]`,
   :math:`[`\ int09\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。電子系、近藤格子系の場合には
   | 0: アップスピン、
   | 1: ダウンスピン、
   | スピン系の場合には、
   | :math:`0, 1, \cdots, 2S+1`
     (:math:`-S-0.5, -S+0.5, \cdots, S+0.5`\ に対応\ :math:`)`
   | を選択することが出来ます。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  スピンに関して計算する場合、\ :math:`i=j, k=l`\ を満たさない場合ペアが存在するとエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されているニ体グリーン関数成分の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int09\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

SingleExcitation指定ファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一体励起状態を作成するための演算子\ :math:`c_{i\sigma_1}(c_{i\sigma_1}^{\dagger})`\ を定義します。以下にファイル例を記載します。

::

    ===============================
    NSingle         24
    ===============================
    ======== Single Excitation ======
    ===============================
        0     0     0    1.0    0.0
        0     1     0    1.0    0.0
        1     0     0    1.0    0.0
       (continue...)
       11     0    0    1.0    0.0
       11     1    0    1.0    0.0

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降: [int02]  [int03]  [int04]  [double01]  [double02]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** 一体励起演算子のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** 一体励起演算子の総数を指定します。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。電子系・近藤格子系の場合は
   | 0: アップスピン、
   | 1: ダウンスピン、
   | スピン系の場合には、
   | :math:`0, 1, \cdots, 2S+1`
     (:math:`-S-0.5, -S+0.5, \cdots, S+0.5`\ に対応\ :math:`)`
   | を選択することが出来ます。

-  :math:`[`\ int04\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** 一体励起演算子のタイプを指定する整数。
   | 0: :math:` c_{i\sigma_1}`
   | 1: :math:` c_{i\sigma_1}^{\dagger}`
   | を選択することが出来ます。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明
   :**\ :math:`c_{i\sigma_1}(c_{i\sigma_1}^{\dag})`\ の実部を\ :math:`[`\ double01\ :math:`]`\ 、虚部を\ :math:`[`\ double02\ :math:`]`\ でそれぞれ指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されている一体励起演算子の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int04\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

PairExcitation指定ファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~

二体励起状態を作成するための演算子\ :math:`c_{i\sigma_1}c_{j\sigma_2}^{\dagger}(c_{i\sigma_1}^{\dagger}c_{j\sigma_2})`\ を定義します。なお、\ :math:`c_{i\sigma_1}c_{j\sigma_2}^{\dagger}`\ と\ :math:`c_{i\sigma_1}^{\dagger}c_{j\sigma_2}`\ を混同することは出来ません。また、\ :math:`S_z`\ 保存の系に対しては\ :math:`\sigma_1=\sigma_2`\ とする必要があります。
以下にファイル例を記載します。

::

    ===============================
    NPair         24
    ===============================
    ======== Pair Excitation ======
    ===============================
        0     0     0     0    0    1.0    0.0
        0     1     0     1    0    1.0    0.0
        1     0     1     0    0    1.0    0.0
       (continue...)
       11     0    11     0    0    1.0    0.0
       11     1    11     1    0    1.0    0.0

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

-  6行以降:
   [int02]  [int03]  [int04]  [int05]  [int06]  [double01]  [double02]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :** 二体励起演算子のキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** 二体励起演算子の総数を指定します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int04\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。電子系・近藤格子系の場合は
   | 0: アップスピン、
   | 1: ダウンスピン、
   | スピン系の場合には、
   | :math:`0, 1, \cdots, 2S+1`
     (:math:`-S-0.5, -S+0.5, \cdots, S+0.5`\ に対応\ :math:`)`
   | を選択することが出来ます。

-  :math:`[`\ int06\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** 二体励起演算子のタイプを指定する整数。
   | 0: :math:` c_{i\sigma_1}c_{j\sigma_2}^{\dagger}`
   | 1: :math:` c_{i\sigma_1}^{\dagger}c_{j\sigma_2}`
   | を選択することが出来ます。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :**
   :math:` c_{i\sigma_1}c_{j\sigma_2}^{\dagger} ( c_{i\sigma_1}^{\dagger}c_{j\sigma_2})`\ の実部を\ :math:`[`\ double01\ :math:`]`\ 、虚部を\ :math:`[`\ double02\ :math:`]`\ でそれぞれ指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  成分が重複して指定された場合にはエラー終了します。

-  :math:`[`\ int01\ :math:`]`\ と定義されている二体励起演算子の総数が異なる場合はエラー終了します。

-  :math:`[`\ int02\ :math:`]`-:math:`[`\ int06\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

SpectrumVec指定ファイル
~~~~~~~~~~~~~~~~~~~~~~~

スペクトル計算用の入力ファイルのヘッダを指定します。
ファイル名およびファイル形式は以下の通りです(ファイル形式はeigenvec.datと同様です)。
ファイルデータはバイナリ形式です。

ファイル名
^^^^^^^^^^

-  ##\_rank\_$$.dat

##はSpectrumVecで指定されるヘッダ、$$はランク番号を表します。また、&&はTPQ時のサンプリングの番号を表します。

ファイル形式
^^^^^^^^^^^^

-  1行目：\ :math:`[`\ int01\ :math:`]`

-  2行目：\ :math:`[`\ int02\ :math:`]`

-  2行目-:
   :math:`[`\ double01\ :math:`]`  :math:`[`\ double02\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 計算対象のヒルベルト空間数を指定する整数。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型

   **説明 :**
   計算に要したステップ数を表します。Lanczos法ではLanczosステップ数、TPQ法ではハミルトニアンを乗算した回数を記載します。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   | **説明 :** 入力するベクトルの値を表します。
   | :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。

OneBodyTE指定ファイル
~~~~~~~~~~~~~~~~~~~~~

各時刻で付加される一体型の演算子\ :math:`t_{i\sigma_1 j \sigma_2}(t)c_{i\sigma_1}^{\dagger}c_{j\sigma_2}`\ を定義します。
以下にファイル例を記載します。

::

    ==================================
    AllTimeStep         100
    ==================================
    ===== OneBody Time Evolution =====
    ==================================
        0.0   4
        0  0  1  0      1.0    0.0
        1  0  0  0      1.0    0.0
        0  1  1  1      1.0    0.0
        1  1  0  1      1.0    0.0
        0.2   4
       (continue...)

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

6行以降は時刻tおよびその時刻での非ゼロの相互作用の個数を最初に指定し、
続けて対応する一体相互作用を指定する形式を取ります。

-  m行: [double01]  [int02]

-  (m+1) - (m+1+[int02])行:
   [int03]  [int04]  [int05]  [int06]  [double02]  [double03]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   ファイル内で定義されている総タイムステップ数を表すキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** ファイル内で定義されている総タイムステップ数を指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** 時刻\ :math:`t`\ を指定します。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   時刻\ :math:`t`\ で付加される一体相互作用の個数を指定します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int04\ :math:`]`, :math:`[`\ int06\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。
   | 0: アップスピン
   | 1: ダウンスピン
   | を選択することが出来ます。

-  :math:`[`\ double02\ :math:`]`, :math:`[`\ double03\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :**
   時刻\ :math:`t`\ で付加される一体相互作用の実部を\ :math:`[`\ double02\ :math:`]`\ 、虚部を\ :math:`[`\ double03\ :math:`]`\ でそれぞれ指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  ModParaファイルで指定されるLanczosStepが\ :math:`[`\ int02\ :math:`]`\ よりも大きい場合にはエラー終了します。

-  :math:`[`\ int03\ :math:`]`-:math:`[`\ int06\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

TwoBodyTE指定ファイル
~~~~~~~~~~~~~~~~~~~~~

各時刻で付加される二体型の演算子\ :math:`I_{i\sigma_1j \sigma_2 k \sigma_3 l \sigma_4}(t)c_{i\sigma_1}^{\dagger}c_{j\sigma_2}c_{k\sigma_3}^{\dagger}c_{l\sigma_4}`\ を定義します。
以下にファイル例を記載します。

::

    ==================================
    AllTimeStep         100
    ==================================
    ===== TwoBody Time Evolution =====
    ==================================
        0.0   3
        0  1  0  1  0  0  0  0       1.0    0.0
        1  0  1  0  0  0  0  0       1.0    0.0
        1  0  1  0  2  0  2  0       1.0    0.0 
        0.2   3
       (continue...)

ファイル形式
^^^^^^^^^^^^

以下のように行数に応じ異なる形式をとります。

-  1行: ヘッダ(何が書かれても問題ありません)。

-  2行: [string01] [int01]

-  3-5行: ヘッダ(何が書かれても問題ありません)。

6行以降は時刻tおよびその時刻での非ゼロの相互作用の個数を最初に指定し、
続けて対応する二体相互作用を指定する形式を取ります。

-  m行: [double01]  [int02]

-  (m+1) - (m+1+[int02])行:
   [int03]  [int04]  [int05]  [int06]  [int07]  [int08]  [int09]  [int10]  [double02]  [double03]

パラメータ
^^^^^^^^^^

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型 (空白不可)

   **説明 :**
   ファイル内で定義されている総タイムステップ数を表すキーワード名を指定します(任意)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :** ファイル内で定義されている総タイムステップ数を指定します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :** 時刻\ :math:`t`\ を指定します。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   時刻\ :math:`t`\ で付加される二体相互作用の個数を指定します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`,
   :math:`[`\ int07\ :math:`]`, :math:`[`\ int09\ :math:`]`

   **形式 :** int型 (空白不可)

   **説明 :**
   サイト番号を指定する整数。0以上\ ``Nsite``\ 未満で指定します。

-  :math:`[`\ int04\ :math:`]`, :math:`[`\ int06\ :math:`]`,
   :math:`[`\ int08\ :math:`]`, :math:`[`\ int10\ :math:`]`

   **形式 :** int型 (空白不可)

   | **説明 :** スピンを指定する整数。
   | 0: アップスピン
   | 1: ダウンスピン
   | を選択することが出来ます。

-  :math:`[`\ double02\ :math:`]`, :math:`[`\ double03\ :math:`]`

   **形式 :** double型 (空白不可)

   **説明 :**
   時刻\ :math:`t`\ で付加される二体相互作用の実部を\ :math:`[`\ double02\ :math:`]`\ 、虚部を\ :math:`[`\ double03\ :math:`]`\ でそれぞれ指定します。

使用ルール
^^^^^^^^^^

本ファイルを使用するにあたってのルールは以下の通りです。

-  行数固定で読み込みを行う為、ヘッダの省略はできません。

-  ModParaファイルで指定されるLanczosStepが\ :math:`[`\ int02\ :math:`]`\ よりも大きい場合にはエラー終了します。

-  :math:`[`\ int03\ :math:`]`-:math:`[`\ int06\ :math:`]`\ を指定する際、範囲外の整数を指定した場合はエラー終了します。

出力ファイル
------------

出力ファイルに関するファイル形式を記載します。

CHECK\_Chemi.dat
~~~~~~~~~~~~~~~~

Hamiltonianのうち化学ポテンシャル

.. math:: H+=\sum_{i,\sigma} \mu_{i\sigma} c_{i\sigma}^{\dagger}c_{i\sigma}

 に関する入力確認を行います。\ :math:`\mu_{i\sigma}`\ が出力されます。
以下にファイル例を記載します。

::

    i=0 spin=0 isite1=1 tmp_V=0.000000 
    i=1 spin=0 isite1=2 tmp_V=0.000000 
    i=2 spin=0 isite1=3 tmp_V=0.000000 
    i=3 spin=0 isite1=4 tmp_V=0.000000 
    i=4 spin=0 isite1=5 tmp_V=0.000000 
    i=5 spin=0 isite1=6 tmp_V=0.000000 
    …

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  i=\ :math:`[`\ int01\ :math:`]` spin=\ :math:`[`\ int02\ :math:`]`
   isite1=\ :math:`[`\ int03\ :math:`]`
   tmp\_V=\ :math:`[`\ double01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 入力番号。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型

   | **説明 :**
     :math:`\mu_{i\sigma}`\ のスピン番号\ :math:`\sigma`\ を表す整数。
   | 0: アップスピン
   | 1: ダウンスピン
   | を表します。

-  :math:`[`\ int03\ :math:`]`

   **形式 :** int型

   **説明 :**
   :math:`\mu_{i\sigma}`\ のサイト番号\ :math:`i`\ を表す整数。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** :math:`\mu_{i\sigma}`\ の値。

CHECK\_InterAll.dat
~~~~~~~~~~~~~~~~~~~

Hamiltonianの一般二体相互作用のうち対角成分

.. math:: H+=\sum_{i,j, \sigma} I_{iijj\sigma_1\sigma_1\sigma_2\sigma_2} c_{i\sigma_1}^{\dagger}c_{i\sigma_1}c_{i\sigma_2}^{\dagger}c_{i\sigma_2}


に関する入力確認を行います。\ :math:` I_{iijj\sigma_1\sigma_1\sigma_2\sigma_2}`\ が出力されます。
以下にファイル例を記載します。

::

    i=0 isite1=1 A_spin=0 isite2=2 B_spin=0 tmp_V=0.500000 
    i=1 isite1=1 A_spin=0 isite2=2 B_spin=1 tmp_V=-0.500000 
    i=2 isite1=1 A_spin=1 isite2=2 B_spin=0 tmp_V=-0.500000 
    i=3 isite1=1 A_spin=1 isite2=2 B_spin=1 tmp_V=0.500000 
    i=4 isite1=2 A_spin=0 isite2=3 B_spin=0 tmp_V=0.500000 
    i=5 isite1=2 A_spin=0 isite2=3 B_spin=1 tmp_V=-0.500000 
    …

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  i=\ :math:`[`\ int01\ :math:`]` isite1=\ :math:`[`\ int02\ :math:`]`
   A\_spin=\ :math:`[`\ int03\ :math:`]`
   isite2=\ :math:`[`\ int04\ :math:`]`
   B\_spin=\ :math:`[`\ int05\ :math:`]`
   tmp\_V=\ :math:`[`\ double01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 入力番号。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int04\ :math:`]`

   **形式 :** int型

   | **説明 :**
     :math:`I_{iijj\sigma_1\sigma_1\sigma_2\sigma_2}`\ のサイト番号を表す整数。
   | :math:`[`\ int02\ :math:`]`\ が\ :math:`i`,
     :math:`[`\ int04\ :math:`]`\ が\ :math:`j`\ を表します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int05\ :math:`]`

   **形式 :** int型

   | **説明 :**
     :math:`I_{iijj\sigma_1\sigma_1\sigma_2\sigma_2}`\ のスピン番号を表す整数。
   | :math:`[`\ int03\ :math:`]`\ が\ :math:`\sigma_1`,
     :math:`[`\ int05\ :math:`]`\ が\ :math:`\sigma_2`\ に対応し、それぞれ
   | 0: アップスピン
   | 1: ダウンスピン
   | を表します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** :math:`I_{iijj\sigma_1\sigma_1\sigma_2\sigma_2}`\ の値。

CHECK\_CoulombIntra.dat
~~~~~~~~~~~~~~~~~~~~~~~

Hamiltonianのオンサイトクーロン相互作用

.. math:: H+=\sum_{i} U_i n_{i\uparrow} n_{j \downarrow}

 に関する入力確認を行います。\ :math:`U_i`\ が出力されます。
以下にファイル例を記載します。

::

    i=0 isite1=1 tmp_V=4.000000 
    i=1 isite1=2 tmp_V=4.000000 
    i=2 isite1=3 tmp_V=4.000000 
    i=3 isite1=4 tmp_V=4.000000 
    i=4 isite1=5 tmp_V=4.000000 
    i=5 isite1=6 tmp_V=4.000000 

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  i=\ :math:`[`\ int01\ :math:`]` isite1=\ :math:`[`\ int02\ :math:`]`
   tmp\_V=\ :math:`[`\ double01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 入力番号。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型

   **説明 :** :math:`U_i`\ のサイト番号\ :math:`i`\ を表す整数。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** :math:`U_i`\ の値。

CHECK\_Hund.dat
~~~~~~~~~~~~~~~

HamiltonianのHundカップリング

.. math::

   \begin{aligned}
   H += -\sum_{i,j}J_{ij}^{\rm Hund} (n_{i\uparrow}n_{j\uparrow}+n_{i\downarrow}n_{j\downarrow})\end{aligned}


に関する入力確認を行います。\ :math:`J_{ij}^{\rm Hund}`\ が出力されます。
以下にファイル例を記載します。

::

    i=0 isite1=1 isite2=2 tmp_V=0.250000 
    i=1 isite1=2 isite2=3 tmp_V=0.250000 
    i=2 isite1=3 isite2=4 tmp_V=0.250000 
    i=3 isite1=4 isite2=5 tmp_V=0.250000 
    i=4 isite1=5 isite2=6 tmp_V=0.250000 
    i=5 isite1=6 isite2=1 tmp_V=0.250000 

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  i=\ :math:`[`\ int01\ :math:`]` isite1=\ :math:`[`\ int02\ :math:`]`
   isite2=\ :math:`[`\ int03\ :math:`]`
   tmp\_V=\ :math:`[`\ double01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 入力番号。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型

   | **説明 :** :math:`J_{ij}^{\rm Hund}`\ のサイト番号を表す整数。
   | :math:`[`\ int02\ :math:`]`\ が\ :math:`i`,
     :math:`[`\ int03\ :math:`]`\ が\ :math:`j`\ を表します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** :math:`J_{ij}^{\rm Hund}`\ の値。

CHECK\_INTER\_U.dat
~~~~~~~~~~~~~~~~~~~

Hamiltonianのオフサイトクーロン相互作用

.. math:: H+=\sum_{i} V_{ij} n_{i} n_{j}

 に関する入力確認を行います。\ :math:`V_{ij}`\ が出力されます。
以下にファイル例を記載します。

::

    i=0 isite1=1 isite2=2 tmp_V=-0.125000 
    i=1 isite1=2 isite2=3 tmp_V=-0.125000 
    i=2 isite1=3 isite2=4 tmp_V=-0.125000 
    i=3 isite1=4 isite2=5 tmp_V=-0.125000 
    i=4 isite1=5 isite2=6 tmp_V=-0.125000 
    i=5 isite1=6 isite2=1 tmp_V=-0.125000 

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  i=\ :math:`[`\ int01\ :math:`]` isite1=\ :math:`[`\ int02\ :math:`]`
   isite2=\ :math:`[`\ int03\ :math:`]`
   tmp\_V=\ :math:`[`\ double01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 入力番号。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型

   | **説明 :** :math:`V_{ij}`\ のサイト番号を表す整数。
   | :math:`[`\ int02\ :math:`]`\ が\ :math:`i`,
     :math:`[`\ int03\ :math:`]`\ が\ :math:`j`\ を表します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** :math:`V_{ij}`\ の値。

CHECK\_Memory.dat
~~~~~~~~~~~~~~~~~

使用するメモリサイズの出力を行います。配列サイズおよび必要なメモリを出力します。
以下にファイル例を記載します。

::

    MAX DIMENSION idim_max=400 
    REQUIRED MEMORY  max_mem=0.000019 GB 

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  MAX DIMENSION idim\_max=\ :math:`[`\ int01\ :math:`]`

-  REQUIRED MEMORY max\_mem =\ :math:`[`\ double01\ :math:`]` GB

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** ヒルベルトスペースの数を表します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :**
   ヒルベルトスペースの確保に必要とするメモリサイズを表します(単位はGB)。

WarningOnTransfer.dat
~~~~~~~~~~~~~~~~~~~~~

Transferの成分が重複している場合に出力されます。
以下にファイル例を記載します。

::

    double conuntings in transfers: i=0 j=2 spni 0 spnj 0  
    double conuntings in transfers: i=2 j=0 spni 0 spnj 0  
    double conuntings in transfers: i=0 j=2 spni 1 spnj 1  
    double conuntings in transfers: i=2 j=0 spni 1 spnj 1  

ファイル形式
^^^^^^^^^^^^

以下のようなファイル形式をとります。

-  double conuntings in transfers: i=\ :math:`[`\ int01\ :math:`]`
   j=\ :math:`[`\ int02\ :math:`]` spni :math:`[`\ int03\ :math:`]` spnj
   :math:`[`\ int04\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`, :math:`[`\ int02\ :math:`]`

   **形式 :** int型

   **説明 :** 重複しているTransferのサイト番号を表します。

-  :math:`[`\ int03\ :math:`]`, :math:`[`\ int04\ :math:`]`

   **形式 :** int型

   | **説明 :** 重複しているTransferのスピン番号を表します。
   | 0: アップスピン
   | 1: ダウンスピン
   | を表します。

CalcTimer.dat
~~~~~~~~~~~~~

| 計算処理にかかった時間が出力されます。
  計算処理、処理番号、計算処理時間[秒]の順に出力します。
  以下にTPQ法の場合の出力例を記載します。

::

    All                                                [0000]     12.94052
      sz                                               [1000]      0.01795
      diagonalcalc                                     [2000]      0.00693
      CalcByTPQ                                        [3000]     12.90670
        FirstMultiply                                  [3100]      0.08416
          rand   in FirstMultiply                      [3101]      0.00172
          mltply in FirstMultiply                      [3102]      0.07707
        expec_energy_flct                              [3200]      9.06255
          calc flctuation in expec_energy_flct         [3201]      1.67779
          mltply in expec_energy_flct                  [3202]      7.31207
        expec_onebody                                  [3300]      0.11640
        expec_twobody                                  [3400]      3.28796
        Multiply                                       [3500]      0.14840
        FileIO                                         [3600]      0.20493
    ================================================
    All mltply                                         [0001]      7.38883
      diagonal                                         [0100]      0.04153
      Hubbard                                          [0300]      7.34636
        trans    in Hubbard                            [0310]      7.34595
          double                                       [0311]      0.00000
          single                                       [0312]      0.00000
          inner                                        [0313]      7.34299
        interall in Hubbard                            [0320]      0.00008
          interPE                                      [0321]      0.00000
          inner                                        [0322]      0.00000
        pairhopp in Hubbard                            [0330]      0.00006
          interPE                                      [0331]      0.00000
          inner                                        [0332]      0.00000
        exchange in Hubbard                            [0340]      0.00004
          interPE                                      [0341]      0.00000
          inner                                        [0342]      0.00000
    ================================================

TimeKeeper.dat
~~~~~~~~~~~~~~

計算経過情報が出力されます。 以下にLanczos法の場合の出力例を記載します。

::

    diagonal calculation finishes: Wed Sep 16 22:58:49 2015
    Lanczos Eigen Value start: Wed Sep 16 22:58:49 2015
    1 th Lanczos step: Wed Sep 16 22:58:49 2015
      …
    122 th Lanczos step: Wed Sep 16 22:58:49 2015
    Lanczos Eigenvalue finishes: Wed Sep 16 22:58:49 2015
    Lanczos Eigenvector finishes: Wed Sep 16 22:58:49 2015
    Lanczos expec energy finishes: Wed Sep 16 22:58:49 2015
    CG Eigenvector finishes: Wed Sep 16 22:58:49 2015
    CG expec energy finishes: Wed Sep 16 22:58:50 2015
    CG expec_cisajs finishes: Wed Sep 16 22:58:50 2015
    CG expec_cisajacktalt begins: Wed Sep 16 22:58:50 2015

ファイル名
^^^^^^^^^^

-  ##\_TimeKeeper.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

sz\_TimeKeeper.dat
~~~~~~~~~~~~~~~~~~

ヒルベルトスペースを確保する際の経過情報が出力されます。
以下に出力例を記載します。

::

    initial sz : Wed Sep 16 22:58:49 2015
    num_threads==4
    omp parallel sz finishes: Wed Sep 16 22:58:49 2015
    mid omp parallel sz : Wed Sep 16 22:58:49 2015
    omp parallel sz finishes: Wed Sep 16 22:58:49 2015

ファイル名
^^^^^^^^^^

-  ##\_sz\_TimeKeeper.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

Time\_CG\_EigenVector.dat
~~~~~~~~~~~~~~~~~~~~~~~~~

(Lanczos法のみ) CG法で固有ベクトルを計算する際のログを出力します。

::

    allocate succeed !!! 
    b[4341]=1.000000 bnorm== 1.000000 
    i_itr=0 itr=5 0.0411202543 0.0000100000 
    …
    i_itr=0 itr=155 0.0000000058 0.0000100000 
    CG OK:   t_itr=155 
    i_itr=0 itr=155 time=0.000000  
    fabs(fabs(xb)-1.0)=0.9955114473313577
    b[4341]=0.004489 bnorm== 1.000000 
    i_itr=1 itr=5 13.0033983157 0.0000100000 
    …
    CG OK:   t_itr=275 
    i_itr=1 itr=120 time=0.000000  
    fabs(fabs(xb)-1.0)=0.0000000000001295
    number of iterations in inv1:i_itr=1 itr=120 
    t_itr=275 0.000000

ファイル名
^^^^^^^^^^

-  ##\_Time\_CG\_EigenVector.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

energy.dat
~~~~~~~~~~

| (Lanczos法、LOBCG法のみ)
  Lanczos法もしくはCG法で求めた固有ベクトルを用いて計算したエネルギー、ダブロンと\ :math:`\langle S_z \rangle`を出力します。
  以下にファイル例を記載します。
| ``method="Lanczos"``\ の場合

::

    Energy  -7.1043675920 
    Doublon  0.4164356536 
    Sz  0.0000000000 

``method="CG"``\ の場合

::

    State 0
      Energy  -7.1043675920 
      Doublon  0.4164356536 
      Sz  0.0000000000 

    State 1
    :

ファイル名
^^^^^^^^^^

-  ##\_energy.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  Energy :math:`[`\ double01\ :math:`]`

-  Doublon :math:`[`\ double02\ :math:`]`

-  Sz :math:`[`\ double03\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :**
   Lanczos法・CG法で求めた固有ベクトルを用い計算したエネルギー。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** Lanczos法・CG法で求めた固有ベクトルを用い計算したダブロン
   :math:`\frac{1}{N_s} \sum_{i}\langle n_{i\uparrow}n_{i\downarrow}\rangle`
   (:math:`N_s`\ はサイト数)。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :** 固有ベクトルを用い計算した\ :math:`\langle S_z\rangle`\ 。

Lanczos\_Step.dat
~~~~~~~~~~~~~~~~~

| (Lanczos法、LOBCG法でのみ出力)
  固有ベクトルを求めている際のログを出力します。以下にファイル例を示します。

::

    LanczosStep  E[1] E[2] E[3] E[4] Target:E[3] E_Max/Nsite
    stp = 2 1.2149586211 14.6560471044 xxxxxxxxxx xxxxxxxxx 0.0000000000 xxxxxxxxx
    stp=4 -5.6626980051 3.1523174817 12.4860778911 21.2322666770 12.4860778911 2.6540333346
    stp=6 -8.5113374325 -2.3219709559 4.3459108959 11.5079386600 4.3459108959 3.0307814358
    stp=8 -9.5061025854 -5.2757708534 -0.1734100333 5.2236216333 -0.1734100333 3.2049774861
    stp=10 -9.7541889139 -6.6054773893 -2.9493235242 1.2364826532 -2.9493235242 3.2686702753
    ...
    stp=84 -10.4543987874 -9.8960493865 -9.7550111859 -9.7407358084 -9.7550111859 3.3731105157
    stp=86 -10.4543987874 -9.8960493865 -9.7550111859 -9.7407358084 -9.7550111859 3.3731105157
    stp=88 -10.4543987874 -9.8960493865 -9.7550111859 -9.7407358084 -9.7550111859 3.3731105157

| ``method="CG"``\ の場合

::

        Step   Residual-2-norm     Threshold      Energy
            1     6.79819e+00     8.19743e-07    7.86586e+00     8.19743e+00     8.02804e+00
            2     7.47402e+00     3.69905e-07    3.35827e+00     3.63546e+00     3.69905e+00
            3     5.30943e+00     2.44472e-07   -2.44472e+00    -2.23296e+00    -1.95487e+00
            4     4.52737e+00     5.10297e-07   -5.10297e+00    -4.92390e+00    -4.58682e+00
            5     3.66168e+00     7.14105e-07   -7.14105e+00    -6.91226e+00    -6.44532e+00
            6     3.12717e+00     8.27201e-07   -8.27201e+00    -7.93262e+00    -7.44680e+00
      ...
          152     1.05602e-06     1.04544e-06   -1.04544e+01    -9.89605e+00    -9.89605e+00
          153     1.07401e-06     1.04544e-06   -1.04544e+01    -9.89605e+00    -9.89605e+00
          154     9.45018e-07     1.04544e-06   -1.04544e+01    -9.89605e+00    -9.89605e+00

ファイル名
^^^^^^^^^^

-  ##\_Lanczos\_Step.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  ``method="Lanczos"``\ の場合

   stp= :math:`[`\ int01\ :math:`]` :math:`[`\ double01\ :math:`]`
   :math:`[`\ double02\ :math:`]` :math:`[`\ double03\ :math:`]`
   :math:`[`\ double04\ :math:`]` :math:`[`\ double-a\ :math:`]`
   :math:`[`\ double-b\ :math:`]`

-  ``method="CG"``\ の場合

   :math:`[`\ int01\ :math:`]` :math:`[`\ double-c\ :math:`]`
   :math:`[`\ double-d\ :math:`]` :math:`[`\ double01\ :math:`]`
   :math:`[`\ double02\ :math:`]` ...

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** Lanczos法\ :math:`\cdot`\ LOBCG法での計算ステップ数。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`,
   :math:`[`\ double03\ :math:`]`, :math:`[`\ double04\ :math:`]` ...

   **形式 :** double型

   **説明 :**
   Lanczos法\ :math:`\cdot`\ LOBCG法で計算時に求められた固有値を昇順に並べたもの。
   Lanczos法では4個分,
   LOBCG法では\ ``exct``\ で指定した個数が出力されます
   (上記の例では``exct=3``).
   Lanczos法では縮退している固有値はまとめて1個と数えられますが,
   LOBCG法では縮退している個数に応じて固有値が出力されます.
   上記の例では第一励起状態が2重以上に縮退していることが分かります.

-  :math:`[`\ double-a\ :math:`]`

   **形式 :** double型

   **説明 :** (Lanczos法のみ) ``LanczosTarget``\ で指定した,
   収束判定に用いられる固有値が出力されます
   (上記の例では``LanczosTarget=3``).

-  :math:`[`\ double-b\ :math:`]`

   **形式 :** double型

   **説明 :** (Lanczos法のみ) 最大固有値をサイト数で割ったもの.
   TPQ法での\ ``LargeValue``\ の下限値となります.

-  :math:`[`\ double-c\ :math:`]`

   **形式 :** double型

   **説明 :** (LOBCG法のみ)
   計算した固有ベクトルの残差の2-ノルムの中で最大のもの.
   収束判定に用いられます.

-  :math:`[`\ double-d\ :math:`]`

   **形式 :** double型

   **説明 :** (LOBCG法のみ) 収束判定のしきい値.
   ``LanczosEps``\ で指定した値に基底状態のエネルギーの絶対値をかけています.

Time\_TPQ\_Step.dat
~~~~~~~~~~~~~~~~~~~

| (TPQ法でのみ出力) TPQ法でのステップ毎の開始時間を出力します。
  再計算の場合は値が追記されます。 以下にファイル例を示します。

::

    set 0 step 1:TPQ begins: Wed Jul 13 07:59:20 2016
    set 0 step 2:TPQ begins: Wed Jul 13 07:59:20 2016
    set 0 step 3:TPQ begins: Wed Jul 13 07:59:20 2016
    …
    set 4 step 1997:TPQ begins: Wed Jul 13 07:59:32 2016
    set 4 step 1998:TPQ begins: Wed Jul 13 07:59:32 2016
    set 4 step 1999:TPQ begins: Wed Jul 13 07:59:32 2016

ファイル名
^^^^^^^^^^

-  ##\_TPQ\_Step.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  set :math:`[`\ int01\ :math:`]` stp :math:`[`\ int02\ :math:`]`: TPQ
   begins: :math:`[`\ string01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** TPQ法でのシード数。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型

   **説明 :** TPQ法でのステップ数。

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型

   **説明 :** 計算開始時間。

Norm\_rand.dat
~~~~~~~~~~~~~~

| (TPQ法でのみ出力) TPQ法での有限温度計算時のログを出力します。
  再計算の場合は値が追記されます。 以下にファイル例を示します。

::

     # inv_temp, global_norm, global_1st_norm, step_i 
    0.017471 19.046586 11.288975 1
    0.034863 19.089752 11.288975 2
    …
    31.999572 20.802362 11.288975 1997
    32.015596 20.802362 11.288975 1998
    32.031620 20.802362 11.288975 1999

ファイル名
^^^^^^^^^^

-  Norm\_rand??.dat

??はTPQ法計算時のrunの番号を表します。

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ double03\ :math:`]` :math:`[`\ int01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 逆温度\ :math:`1/{k_{\rm B}T}`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** TPQ法で計算される規格化前の波動関数(ベクトル)のノルム:
   :math:`\langle \tilde{\psi}_{k} |\tilde{\psi}_{k}\rangle`\ 。ただし、\ :math:`|\tilde{\psi}_{k}\rangle \equiv(l-\hat{H}/N_{s})|\psi_{k-1}\rangle`\ 。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :**
   規格化前の初期波動関数(ランダムベクトル)のノルム：\ :math:`\langle \tilde{\psi}_{0} |\tilde{\psi}_{0}\rangle`\ 。ただし、\ :math:`|\tilde{\psi}_{0}\rangle`\ は規格化前の初期波動関数。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :**
   初期ランダムベクトルに\ :math:`(l-\hat{H}/N_{s})`\ (:math:`l`\ はModParaファイルの\ ``LargeValue``\ 、\ :math:`N_{s}`\ はサイト数)を作用させた回数。

SS\_rand.dat
~~~~~~~~~~~~

| (TPQ法でのみ出力)TPQ法での有限温度計算結果を出力します。
  再計算の場合は値が追記されます。 以下にファイル例を示します。

::

    # inv_tmp, energy, phys_var, phys_doublon, phys_num, step_i
    0.017471  5.526334 45.390269 1.464589 6.000000 1
    0.034863  5.266718 42.655559 1.434679 6.000000 2
    …
    31.999572  -4.814170 23.176231 0.590568 6.000000 1997
    32.015596  -4.814170 23.176231 0.590568 6.000000 1998
    32.031620  -4.814170 23.176231 0.590568 6.000000 1999

ファイル名
^^^^^^^^^^

-  SS\_rand??.dat

??はTPQ法計算時のrunの番号を表します。

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ double03\ :math:`]` :math:`[`\ double04\ :math:`]`
   :math:`[`\ double05\ :math:`]` :math:`[`\ int01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 逆温度\ :math:`1/{k_{\rm B}T} ~(`\ ただし,
   :math:`k_{\rm B} = 1)`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** エネルギーの期待値\ :math:`\langle H \rangle`\ 。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :**
   ハミルトニアンの2乗の期待値\ :math:`\langle H^2 \rangle`\ 。

-  :math:`[`\ double04\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロン
   ダブロンの期待値\ :math:`\sum_{i}\langle n_{i\uparrow}n_{i\downarrow}\rangle`
   。

-  :math:`[`\ double05\ :math:`]`

   **形式 :** double型

   **説明 :** 粒子数\ :math:`\langle {\hat n} \rangle`\ 。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :**
   初期ランダムベクトルに\ :math:`(l-\hat{H}/N_{s})`\ (:math:`l`\ はModParaファイルの\ ``LargeValue``\ 、\ :math:`N_{s}`\ はサイト数)を作用させた回数。

Flct\_rand.dat
~~~~~~~~~~~~~~

| (TPQ法でのみ出力)
  TPQ法での揺らぎに関する有限温度計算結果を出力します。
  再計算の場合は値が追記されます。 以下にファイル例を示します。

::

     # inv_temp, N, N^2, D, D^2, Sz, Sz^2, step_i
    0.0826564 12.00 144.00 0.00 0.00 0.0009345626081113 0.2500 1
    0.1639935 12.00 144.00 0.00 0.00 0.0023147006319775 0.2500 2
    0.2440168 12.00 144.00 0.00 0.00 0.0037424057659867 0.2500 3
    …
    135.97669 12.00 144.00 0.00 0.00 -0.0000000000167368 0.2500 1998
    136.04474 12.00 144.00 0.00 0.00 -0.0000000000165344 0.2500 1999

ファイル名
^^^^^^^^^^

-  Flct\_rand??.dat

??はTPQ法計算時のrunの番号を表します。

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ double03\ :math:`]` :math:`[`\ double04\ :math:`]`
   :math:`[`\ double05\ :math:`]` :math:`[`\ double06\ :math:`]`
   :math:`[`\ double07\ :math:`]` :math:`[`\ int01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 逆温度\ :math:`1/{k_{\rm B}T}`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** 全粒子数\ :math:`\sum_{i} \langle \hat{n}_i \rangle`\ 。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :**
   粒子数の2乗の期待値\ :math:` \langle (\sum_{i}\hat{n}_i)^2 \rangle`\ 。

-  :math:`[`\ double04\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロン
   :math:`\frac{1}{N_s} \sum_{i}\langle n_{i\uparrow}n_{i\downarrow}\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ double05\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロンの二乗
   :math:`\frac{1}{N_s} \langle (\sum_{i}n_{i\uparrow} n_{i\downarrow})^2\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ double06\ :math:`]`

   **形式 :** double型

   **説明 :** スピンの\ :math:`Sz`\ 成分
   :math:`\frac{1}{N_s} \sum_{i}\langle \hat{S}_i^z\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ double07\ :math:`]`

   **形式 :** double型

   **説明 :** スピンの\ :math:`Sz`\ 成分の二乗
   :math:`\frac{1}{N_s} \langle (\sum_{i} \hat{S}_i^z)^2\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :**
   初期ランダムベクトルに\ :math:`(l-\hat{H}/N_{s})`\ (:math:`l`\ はModParaファイルの\ ``LargeValue``\ 、\ :math:`N_{s}`\ はサイト数)を作用させた回数。

Time\_TE\_Step.dat
~~~~~~~~~~~~~~~~~~

| (実時間発展法でのみ出力)
  実時間発展法でのステップ毎の開始時間を出力します。以下にファイル例を示します。

::

    step 1:TE begins: Wed Jul 13 07:59:20 2017
    step 2:TE begins: Wed Jul 13 07:59:20 2017
    step 3:TE begins: Wed Jul 13 07:59:20 2017
    …
    step 1997:TE begins: Wed Jul 13 07:59:32 2017
    step 1998:TE begins: Wed Jul 13 07:59:32 2017
    step 1999:TE begins: Wed Jul 13 07:59:32 2017

ファイル名
^^^^^^^^^^

-  ##\_TE\_Step.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  stp :math:`[`\ int01\ :math:`]`: TE begins:
   :math:`[`\ string01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** TE法でのステップ数。

-  :math:`[`\ string01\ :math:`]`

   **形式 :** string型

   **説明 :** 計算開始時間。

Norm.dat
~~~~~~~~

| (実時間発展法でのみ出力)
  実時間発展法でのタイムステップ毎のログを出力します。以下にファイル例を示します。

::

     # time, norm, step_i
    0.0000000000000000 0.9999999999999994 0
    0.0100000000000000 1.0000233421898765 1
    0.0200000000000000 1.0000211100654208 2
    0.0300000000000000 1.0000182214014706 3
    0.0400000000000000 1.0000148460317946 4
    0.0500000000000000 1.0000111372562455 5
    0.0600000000000000 1.0000072252313270 6
    0.0700000000000000 1.0000032174168609 7
    0.0800000000000000 0.9999992048382456 8
    0.0900000000000000 0.9999952720176869 9
    0.1000000000000000 0.9999915078951970 10

ファイル名
^^^^^^^^^^

-  Norm.dat

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ int01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 時間\ :math:`t`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :**
   実時間発展法で計算される時刻\ :math:`t`\ での波動関数(ベクトル)のノルム。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** タイムステップ数。

SS.dat
~~~~~~

| (実時間発展法でのみ出力)実時間発展法での各ステップ毎の計算結果を出力します。以下にファイル例を示します。

::

     # time, energy, phys_var, phys_doublon, phys_num, step_i
    0.0000000000000000  -6.0412438187293001 38.8635272290786489 ...
    0.0100000000000000  -5.9310482979751606 37.9593669819686923 ...
    0.0200000000000000  -5.8287182777288828 37.1390062697724801 ...
    0.0300000000000000  -5.7384311863736031 36.4282319427381651 ...
    0.0400000000000000  -5.6636677030535481 35.8466140292489897 ...
    0.0500000000000000  -5.6070659264425551 35.4081795274108799 ...
    0.0600000000000000  -5.5703150294725914 35.1222606981659666 ...
    0.0700000000000000  -5.5540895348193438 34.9942503380419154 ...
    0.0800000000000000  -5.5580244678717312 35.0260574979670665 ...
    0.0900000000000000  -5.5807312981978212 35.2161499389042660 ...
    0.1000000000000000  -5.6198544688797947 35.5591788356216298 ...
    ...

ファイル名
^^^^^^^^^^

-  SS.dat

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ double03\ :math:`]` :math:`[`\ double04\ :math:`]`
   :math:`[`\ double05\ :math:`]` :math:`[`\ int01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 時間\ :math:`t`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** エネルギーの期待値\ :math:`\langle H \rangle`\ 。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :**
   ハミルトニアンの2乗の期待値\ :math:`\langle H^2 \rangle`\ 。

-  :math:`[`\ double04\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロン
   :math:`\frac{1}{N_s} \sum_{i}\langle n_{i\uparrow}n_{i\downarrow}\rangle`
   (ただし:math:`N_s`\ はサイト数)。

-  :math:`[`\ double05\ :math:`]`

   **形式 :** double型

   **説明 :** 粒子数\ :math:`\langle {\hat n} \rangle`\ 。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** タイムステップ数。

Flct.dat
~~~~~~~~

| (実時間発展法でのみ出力)
  実時間発展法での揺らぎに関する各時刻での計算結果を出力します。以下にファイル例を示します。

::

     # time, N, N^2, D, D^2, Sz, Sz^2, step_i
    0.0000000000000000 7.9999999999999991 63.9999999999999929 ...
    0.0100000000000000 8.0000000000000604 64.0000000000004832 ...
    0.0200000000000000 8.0000000000000018 64.0000000000000142 ...
    0.0300000000000000 8.0000000000001013 64.0000000000008100 ...
    0.0400000000000000 7.9999999999999183 63.9999999999993463 ...
    0.0500000000000000 7.9999999999999520 63.9999999999996163 ...
    0.0600000000000000 7.9999999999999627 63.9999999999997016 ...
    0.0700000000000000 8.0000000000000835 64.0000000000006679 ...
    0.0800000000000000 8.0000000000000924 64.0000000000007390 ...
    0.0900000000000000 7.9999999999999600 63.9999999999996803 ...
    0.1000000000000000 7.9999999999999067 63.9999999999992539 ...
    ...

ファイル名
^^^^^^^^^^

-  Flct.dat

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ double03\ :math:`]` :math:`[`\ double04\ :math:`]`
   :math:`[`\ double05\ :math:`]` :math:`[`\ double06\ :math:`]`
   :math:`[`\ double07\ :math:`]` :math:`[`\ int01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 時間\ :math:`t`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** 全粒子数\ :math:`\sum_{i} \langle \hat{n}_i \rangle`\ 。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :**
   粒子数の2乗の期待値\ :math:`\langle (\sum_{i} \hat{n}_i)^2 \rangle`\ 。

-  :math:`[`\ double04\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロン
   :math:`\frac{1}{N_s} \sum_{i}\langle n_{i\uparrow}n_{i\downarrow}\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ double05\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロンの二乗
   :math:`\frac{1}{N_s} \langle (\sum_{i}n_{i\uparrow} n_{i\downarrow})^2\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ double06\ :math:`]`

   **形式 :** double型

   **説明 :** スピンの\ :math:`Sz`\ 成分
   :math:`\frac{1}{N_s} \sum_{i}\langle \hat{S}_i^z\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ double07\ :math:`]`

   **形式 :** double型

   **説明 :** スピンの\ :math:`Sz`\ 成分の二乗
   :math:`\frac{1}{N_s} \langle (\sum_{i}\hat{S}_i^z)^2\rangle`
   の期待値(ただし\ :math:`N_s`\ はサイト数)。

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** タイムステップ数。

Eigenvalue.dat
~~~~~~~~~~~~~~

| (FullDiagでのみ出力)全対角法で計算したエネルギーを出力します。以下にファイル例を記載します。

::

     0 -4.8141698096 
     1 -3.7968502453 
     2 -3.2462822372 
     …
     397 13.9898305290 
     398 14.4896221034 
     399 14.8525199079 

ファイル形式
^^^^^^^^^^^^

以下のファイル形式で記載されます。

-  :math:`[`\ int01\ :math:`]` :math:`[`\ double01\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :**
   固有値のindex。基底エネルギーを0として、エネルギーの低い順から採番する。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** エネルギー\ :math:`\langle H \rangle`\ 。

phys.dat
~~~~~~~~

| (FullDiagでのみ出力)全対角法で計算したエネルギーと物理量を出力します。エネルギーの低い基底エネルギーから順に出力されます。以下にファイル例を記載します。

::

     <H>         <N>        <Sz>       <S2>       <D> 
      -4.814170   0.000000   0.000000  -0.000000   0.590568
      -3.796850   0.000000   0.000000   1.333333   0.423804
     …
     14.489622   0.000000   0.000000   0.000000   2.550240
     14.852520   0.000000   0.000000   0.000000   2.329157

ファイル名
^^^^^^^^^^

-  カノニカル: ##\_phys\_Nup\_$$Ndown%%.dat

-  グランドカノニカル: ##\_phys.dat

##はModParaファイル内の[string02]で指定されるヘッダ、$$はNup、%%はNdownを表します。

ファイル形式
^^^^^^^^^^^^

1行目はヘッダで、2行目以降は以下のファイル形式で記載されます。

-  :math:`[`\ double01\ :math:`]` :math:`[`\ double02\ :math:`]`
   :math:`[`\ double03\ :math:`]` :math:`[`\ double04\ :math:`]`
   :math:`[`\ double05\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** エネルギーの期待値\ :math:`\langle H\rangle`\ 。

-  :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   **説明 :** 粒子数の期待値\ :math:`\langle \hat{n}\rangle`\ 。

-  :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   **説明 :** スピンのz成分の期待値\ :math:`\langle S_z\rangle`\ 。

-  :math:`[`\ double04\ :math:`]`

   **形式 :** double型

   **説明 :** スピンの2乗の期待値\ :math:`\langle {\bm S}^2\rangle`\ 。

-  :math:`[`\ double05\ :math:`]`

   **形式 :** double型

   **説明 :** ダブロン
   :math:`\frac{1}{N_s} \sum_{i}\langle n_{i\uparrow}n_{i\downarrow}\rangle`
   (ただし:math:`N_s`\ はサイト数)。

ham.dat
~~~~~~~

(FullDiagでのみ出力)
``CalcMod``\ ファイルで\ ``OutputHam=1``\ の場合に、HΦ内部で計算されたハミルトニアンをMatrixMarket形式で出力します。\ ``CalcMod``\ ファイルで\ ``InputHam=1``\ とすると、定義ファイル一式と本ファイルを読み込み、再計算することができます。以下にファイル例を記載します。

::

    %%%%MatrixMarket matrix coordinate complex hermitian
    28 28 56
    1 1 1.000000 0.000000
    2 1 0.500000 0.000000
    3 2 0.500000 0.000000
    4 3 0.500000 0.000000
    5 4 0.500000 0.000000
    6 5 0.500000 0.000000
    7 6 0.500000 0.000000
    7 7 1.000000 0.000000
        …

ファイル名
^^^^^^^^^^

-  ##\_ham.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  1行：ヘッダ

-  2行：\ :math:`[`\ int01\ :math:`]`  :math:`[`\ int02\ :math:`]`  :math:`[`\ int03\ :math:`]`

-  3行-：\ :math:`[`\ int04\ :math:`]`  :math:`[`\ int05\ :math:`]`  :math:`[`\ double01\ :math:`]`  :math:`[`\ double02\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** Hamiltonianの行数。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** int型

   **説明 :** Hamiltonianの列数。

-  :math:`[`\ int03\ :math:`]`

   **形式 :** int型

   **説明 :** Hamiltonianの非零の要素数。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   | **説明 :** Hamiltonianの値を表します。
   | :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。

cisajs.dat
~~~~~~~~~~

OneBodyGで指定された一体グリーン関数\ :math:`\langle c_{i\sigma_1}^{\dagger}c_{j\sigma_2}\rangle`\ の計算結果を出力します。以下にファイル例を記載します。

::

        0    0    0    0 0.4452776740 0.0000000000
        0    1    0    1 0.4452776740 0.0000000000
        1    0    1    0 0.5000000000 0.0000000000
        1    1    1    1 0.5000000000 0.0000000000
        2    0    2    0 0.4452776740 0.0000000000
        2    1    2    1 0.4452776740 0.0000000000
        3    0    3    0 0.5000000000 0.0000000000
        3    1    3    1 0.5000000000 0.0000000000
        …

ファイル名
^^^^^^^^^^

Lanczos法: ##\_cisajs.dat

TPQ法: ##\_cisajs\_set??step%%.dat

実時間発展法: ##\_cisajs\_step%%.dat

全対角化法、LOBCG法: ##\_cisajs\_eigen&&.dat

##はModParaファイル内の[string02]で指定されるヘッダ、??はTPQ法計算時のrunの番号、%%はTPQ法でのステップ数、&&は固有値の番号を表します。

ファイル形式
^^^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`  :math:`[`\ int02\ :math:`]`  :math:`[`\ int03\ :math:`]`  :math:`[`\ int04\ :math:`]`  :math:`[`\ double01\ :math:`]`  :math:`[`\ double02\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`, :math:`[`\ int03\ :math:`]`

   **形式 :** int型

   **説明 :**
   サイト番号を指定する整数。\ :math:`[`\ int01\ :math:`]`\ が\ :math:`i`\ サイト、\ :math:`[`\ int03\ :math:`]`\ が\ :math:`j`\ サイトを表します。

-  :math:`[`\ int02\ :math:`]`, :math:`[`\ int04\ :math:`]`

   **形式 :** int型

   | **説明 :**
     スピンを指定する整数。\ :math:`[`\ int02\ :math:`]`\ が\ :math:`\sigma_1`\ 、\ :math:`[`\ int03\ :math:`]`\ が\ :math:`\sigma_2`\ に対応します。
   | 0: アップスピン
   | 1: ダウンスピン
   | を表します。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   | **説明 :**
     :math:`\langle c_{i\sigma_1}^{\dagger}c_{j\sigma_2}\rangle`\ の値を表します。
   | :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。

cisajscktalt.dat
~~~~~~~~~~~~~~~~

TwoBodyGで指定された二体グリーン関数\ :math:`\langle c_{i\sigma_1}^{\dagger}c_{j\sigma_2}c_{k\sigma_3}^{\dagger}c_{l\sigma_4}\rangle`\ の計算結果を出力します。以下にファイル例を記載します。

::

        0    0    0    0    0    0    0    0 0.4452776740 0.0000000000
        0    0    0    0    0    1    0    1 0.1843355815 0.0000000000
        0    0    0    0    1    0    1    0 0.1812412105 0.0000000000
        0    0    0    0    1    1    1    1 0.2640364635 0.0000000000
        0    0    0    0    2    0    2    0 0.0279690007 0.0000000000
        0    0    0    0    2    1    2    1 0.2009271524 0.0000000000
        0    0    0    0    3    0    3    0 0.2512810778 0.0000000000
        0    0    0    0    3    1    3    1 0.1939965962 0.0000000000
        …

ファイル名
^^^^^^^^^^

Lanczos法: ##\_cisajscktalt.dat

TPQ法: ##\_cisajscktalt\_set??step%%.dat

実時間発展法: ##\_cisajscktalt\_step%%.dat

全対角化法、LOBCG法: ##\_cisajscktalt\_eigen&&.dat

##はModParaファイル内の[string02]で指定されるヘッダ、??はTPQ法計算時のrunの番号、%%はTPQ法でのステップ数、&&は固有値の番号を表します。

ファイル形式
^^^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`  :math:`[`\ int02\ :math:`]`  :math:`[`\ int03\ :math:`]`  :math:`[`\ int04\ :math:`]`  :math:`[`\ int05\ :math:`]`  :math:`[`\ int06\ :math:`]`  :math:`[`\ int07\ :math:`]`  :math:`[`\ int08\ :math:`]`  :math:`[`\ double01\ :math:`]`  :math:`[`\ double02\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`,
   :math:`[`\ int03\ :math:`]`,\ :math:`[`\ int05\ :math:`]`,
   :math:`[`\ int07\ :math:`]`

   **形式 :** int型

   **説明 :** サイト番号を指定する整数。
   :math:`[`\ int01\ :math:`]`\ が\ :math:`i`\ サイト、\ :math:`[`\ int03\ :math:`]`\ が\ :math:`j`\ サイト、\ :math:`[`\ int05\ :math:`]`\ が\ :math:`k`\ サイト、\ :math:`[`\ int07\ :math:`]`\ が\ :math:`l`\ サイトを表します。

-  :math:`[`\ int02\ :math:`]`,
   :math:`[`\ int04\ :math:`]`,\ :math:`[`\ int06\ :math:`]`,
   :math:`[`\ int08\ :math:`]`

   **形式 :** int型

   | **説明 :** スピンを指定する整数。
     :math:`[`\ int02\ :math:`]`\ が\ :math:`\sigma_1`\ 、\ :math:`[`\ int04\ :math:`]`\ が\ :math:`\sigma_2`\ 、\ :math:`[`\ int06\ :math:`]`\ が\ :math:`\sigma_3`\ 、\ :math:`[`\ int08\ :math:`]`\ が\ :math:`\sigma_4`\ に対応します。
   | 0: アップスピン
   | 1: ダウンスピン
   | を表します。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   | **説明 :**
     :math:`\langle c_{i\sigma_1}^{\dagger}c_{j\sigma_2}c_{k\sigma_3}^{\dagger}c_{l\sigma_4}\rangle`\ の値を表します。
   | :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。

eigenvec.dat
~~~~~~~~~~~~

CalcModファイルのOutputEigenVec=1の場合に、Lanczos法で計算された固有ベクトルを出力します。IntputEigenVec=1の場合には、出力されたファイルの読み込みを行います。ファイルはバイナリ形式で出力されます。ファイル名およびファイル形式は以下の通りです。

ファイル名
^^^^^^^^^^

-  ##\_eigenvec\_&&\_rank\_$$.dat

##はModParaファイル内の[string02]で指定されるヘッダ、&&は固有値の番号、$$はランク番号を表します。

ファイル形式
^^^^^^^^^^^^

※ ``eigen_vector``\ の一番最初の成分に計算に使用しない値が入っています。

tmpvec.dat
~~~~~~~~~~

CalcModファイルのReStart=1, 2の場合に、計算途中のベクトルを出力します。
ファイルはバイナリ形式で出力されます。
ファイル名およびファイル形式は以下の通りです(ファイル形式はeigenvec.datと同様です)。

ファイル名
^^^^^^^^^^

-  Lanczos法：##\_tmpvec\_rank\_$$.dat

-  TPQ法, LOBPCG法：##\_tmpvec\_set\_&&\_rank\_$$.dat

##はModParaファイル内の[string02]で指定されるヘッダ、
$$はランク番号を表します。また、&&はTPQ時のサンプリングの番号
もしくはLOBPCG法での固有値の番号を表します。

ファイル形式
^^^^^^^^^^^^

次のようなソースコードを用いて、バイナリファイルとして出力されます
(実際の:math:`\HPhi`\ のソースコードとは変数名等が異なります)。

| Lanczos

::

    fp = fopen("zvo_tmpvec_rank_0.dat", "wb");
    fwrite(&number_of_interations, sizeof(int), 1,fp);
    fwrite(&local_size, sizeof(unsigned long int),1,fp);
    fwrite(&last_vector[0], sizeof(complex double),local_size+1, fp);
    fwrite(&second_last_vector[0], sizeof(complex double),local_size+1, fp);
    fclose(fp);

| TPQおよびLOBPCG

::

    fp = fopen("zvo_tmpvec_set_0_rank_0.dat", "wb");
    fwrite(&number_of_interations, sizeof(int), 1,fp);
    fwrite(&local_size, sizeof(unsigned long int),1,fp);
    fwrite(&last_vector[0], sizeof(complex double),local_size+1, fp);
    fclose(fp);

ただし、\ ``number_of_interations``\ は反復回数、
``local_size``\ は固有ベクトルのサイズ(MPI並列を使っている場合は全ヒルベルト次元とは異なります)、
``last_vector``\ は最後の反復でのベクトル、
``second_last_vector``\ は最後から2番目の反復でのベクトルをそれぞれ表します。

※
``last_vector``\ 、\ ``second_last_vector``\ の一番最初の成分に計算に使用しない値が入っています。

DynamicalGreen.dat
~~~~~~~~~~~~~~~~~~

動的グリーン関数の計算結果を出力します。ファイル名およびファイル形式は以下の通りです。

ファイル名
^^^^^^^^^^

-  ##\_DynamicalGreen.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  1行目-:
   :math:`[`\ double01\ :math:`]`  :math:`[`\ double02\ :math:`]`  :math:`[`\ double03\ :math:`]`  :math:`[`\ double04\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double型

   | **説明 :** 振動数の値を表します。
   | :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。

-  :math:`[`\ double03\ :math:`]`, :math:`[`\ double04\ :math:`]`

   **形式 :** double型

   | **説明 :** 動的グリーン関数の値を表します。
   | :math:`[`\ double03\ :math:`]`\ が実部、\ :math:`[`\ double04\ :math:`]`\ が虚部を表します。

recalcvec.dat
~~~~~~~~~~~~~

Lanczso法を用いた動的グリーン関数の再計算に必要な2つのベクトルが出力されます。
ファイルはバイナリ形式で出力されます。
ファイル名およびファイル形式は以下の通りです。

ファイル名
^^^^^^^^^^

-  ##\_recalcvec\_rank\_$$.dat

##はModParaファイル内の[string02]で指定されるヘッダ、$$はランク番号を表します。

ファイル形式
^^^^^^^^^^^^

-  1行目：\ :math:`[`\ int01\ :math:`]`

-  2行目：\ :math:`[`\ int02\ :math:`]`

-  3行目 - :math:`[`\ int02\ :math:`]`\ +3行:
   :math:`[`\ double01\ :math:`]`  :math:`[`\ double02\ :math:`]`

-  4行目 - 2\ :math:`\times`\ :math:`[`\ int02\ :math:`]`\ +4行:
   :math:`[`\ double03\ :math:`]`  :math:`[`\ double04\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :** 動的グリーン関数の計算に要したステップ数を表します。

-  :math:`[`\ int02\ :math:`]`

   **形式 :** Long int型

   **説明 :** 計算対象のヒルベルト空間数を指定する整数。

-  :math:`[`\ double01\ :math:`]`, :math:`[`\ double02\ :math:`]`

   **形式 :** double

   | **説明 :** Lanczos法での\ :math:`\vec{v}_{k+1}`\ を出力します。
     :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。一番最初の成分に計算に使用しない値が入っています。

-  :math:`[`\ double03\ :math:`]`, :math:`[`\ double04\ :math:`]`

   **形式 :** double

   | **説明 :** Lanczos法での\ :math:`\vec{v}_{k+1}`\ を出力します。
     :math:`[`\ double01\ :math:`]`\ が実部、\ :math:`[`\ double02\ :math:`]`\ が虚部を表します。一番最初の成分に計算に使用しない値が入っています。

TMcomponents.dat
~~~~~~~~~~~~~~~~

Lanczso法を用いた動的グリーン関数の再計算に必要な三重対角行列の要素と励起状態のノルムが出力されます。
ファイル名およびファイル形式は以下の通りです。

ファイル名
^^^^^^^^^^

-  ##\_TMcomponents.dat

##はModParaファイル内の[string02]で指定されるヘッダを表します。

ファイル形式
^^^^^^^^^^^^

-  1行目：\ :math:`[`\ int01\ :math:`]`

-  2行目：\ :math:`[`\ double01\ :math:`]`

-  3行目 - :math:`[`\ int02\ :math:`]`\ +3行:
   :math:`[`\ double02\ :math:`]`  :math:`[`\ double03\ :math:`]`

パラメータ
^^^^^^^^^^

-  :math:`[`\ int01\ :math:`]`

   **形式 :** int型

   **説明 :**
   動的グリーン関数の計算に要したステップ数\ :math:`N_d`\ を表します。

-  :math:`[`\ double01\ :math:`]`

   **形式 :** double型

   **説明 :** 励起状態のノルムを表します。

-  :math:`[`\ double02\ :math:`]`, :math:`[`\ double03\ :math:`]`

   **形式 :** double型

   | **説明 :**
     Lanczso法を用いた動的グリーン関数の再計算に必要な三重対角行列の要素\ :math:`\alpha_i,~\beta_i~(i =1,\cdots N_d)`\ の値を表します。一番最初の成分に計算に使用しない値が入っています。
     :math:`[`\ double02\ :math:`]`\ が\ :math:`\alpha_i`\ 、\ :math:`[`\ double03\ :math:`]`\ が\ :math:`\beta_i`\ に対応します。

エラーメッセージ一覧
--------------------

-  ``ERROR ! Unsupported Keyword !``

   存在しないキーワードを指定した場合に表示され、プログラムは停止します。

-  ``"ERROR !  Keyword`` ``is duplicated !``

   同じキーワードを2回指定した場合に表示され、プログラムは停止します。

-  ``ERROR ! Unsupported Solver : ``

-  ``ERROR ! Unsupported Model : ``

-  | ``Sorry, this system is unsupported in the STANDARD MODE...``
   | ``Please use the EXPART MODE, or write a NEW FUNCTION and post it us.``

   ``method``, ``model``, ``lattice``\ のどれかまたは複数に
   サポートしていないパラメーターを入れた場合、プログラムは停止します。

-  ``ERROR ! abs(2 * Sz) > nsite in Hubbard model !``

-  ``ERROR ! Nelec > 2 * nsite in Hubbard model !``

-  ``ERROR ! (nelec + 2 * Sz) % 2 != 0 in Hubbard model !``

-  ``ERROR ! nelec <= nsite && 2 * |Sz| > nelec in Hubbard model !``

-  ``ERROR ! nelec > nsite && 2 * |Sz| > 2 * nsite - nelec in Hubbard model !``

-  ``ERROR ! abs(2 * Sz) > nsite in Spin model !``

-  ``ERROR ! (nsite + 2 * Sz) % 2 != 0 in Spin model !``

-  ``ERROR ! abs(2 * Sz) > nsite in Hubbard model !``

-  ``ERROR ! Nelec_cond / 2 + Nelec_loc > nsite in Kondo model !``

-  ``ERROR ! (nelec_cond + nelec_loc + 2 * Sz) % 2 != 0 in Kondo model !``

-  ``ERROR ! nelec_cond <= nsite / 2 && 2 * |Sz| > nelec_cond + nelec_loc ...``

-  ``ERROR ! nelec_cond > nsite / 2 && abs(Sz2) > nsite / 2 * 3 - nelec...``

   カノニカル集団の計算において、
   入力されたサイト数、電子数、全スピン\ :math:`z`\ 成分が実現できない組み合わせである場合
   (例えば、電子数がサイト数の2倍よりも大きい、など)プログラムは停止します。

-  | ``Check ! `` `` is SPECIFIED but will NOT be USED.``
   | ``        Please COMMENT-OUT this line``
   | ``        or check this input is REALLY APPROPRIATE for your purpose !``

   使われないパラメーターを指定した時には、ユーザーに入力ファイルの確認を促しプログラムは停止します。
   実際に必要のないパラメーターの場合は該当する行を削除もしくはコメントアウトしてください。

-  ``ERROR ! ``\ `` is NOT specified !``

   必ず指定しなければならないキーワードが指定されていない場合にはプログラムは停止します。

-  ``=`` ``######  DEFAULT VALUE IS USED  ######``

   これはエラーメッセージではありません。入力ファイルで指定がなかったためにデフォルト値が使われたことを知らせるメッセージです。

.. [1]
   現在論文執筆中。投稿後に掲載します。
